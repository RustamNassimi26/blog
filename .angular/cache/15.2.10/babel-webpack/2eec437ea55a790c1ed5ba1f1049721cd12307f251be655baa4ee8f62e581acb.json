{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../admin/shared/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptor {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  intercept(req, next) {\n    if (this.auth.isAuthenticated()) {\n      req = req.clone({\n        setParams: {\n          auth: this.auth.token\n        }\n      });\n    }\n    return next.handle(req).pipe(tap(() => {\n      console.log('Intercept');\n    }), catchError(error => {\n      console.log('[Interceptor Error]: ', error);\n      if (error.status === 401) {\n        this.auth.logout();\n        this.router.navigate(['/admin', 'login'], {\n          queryParams: {\n            authFailed: true\n          }\n        });\n      }\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAoBA,UAAU,QAAO,MAAM;AAG3C,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;;;;AAG9C,OAAM,MAAOC,eAAe;EAC1BC,YACUC,IAAiB,EACjBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;EAEhB;EAEAC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAI,IAAI,CAACJ,IAAI,CAACK,eAAe,EAAE,EAAE;MAC/BF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC;QACdC,SAAS,EAAE;UACTP,IAAI,EAAE,IAAI,CAACA,IAAI,CAACQ;;OAEnB,CAAC;;IAEJ,OAAOJ,IAAI,CAACK,MAAM,CAACN,GAAG,CAAC,CACpBO,IAAI,CACHb,GAAG,CAAC,MAAK;MACPc,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1B,CAAC,CAAC,EACFhB,UAAU,CAAEiB,KAAwB,IAAI;MACtCF,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,KAAK,CAAC;MAC3C,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACd,IAAI,CAACe,MAAM,EAAE;QAClB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE;UACxCC,WAAW,EAAE;YACXC,UAAU,EAAE;;SAEf,CAAC;;MAEJ,OAAOvB,UAAU,CAACkB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAAC;qBAjCUf,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAqB,SAAfrB,eAAe;EAAA","names":["throwError","catchError","tap","AuthInterceptor","constructor","auth","router","intercept","req","next","isAuthenticated","clone","setParams","token","handle","pipe","console","log","error","status","logout","navigate","queryParams","authFailed","factory"],"sourceRoot":"","sources":["I:\\Angular\\angular-blog\\src\\app\\shared\\auth.interceptor.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {AuthService} from '../admin/shared/services/auth.service';\r\nimport {Router} from '@angular/router';\r\nimport {catchError, tap} from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private auth: AuthService,\r\n    private router: Router\r\n  ) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (this.auth.isAuthenticated()) {\r\n      req = req.clone({\r\n        setParams: {\r\n          auth: this.auth.token as string\r\n        }\r\n      })\r\n    }\r\n    return next.handle(req)\r\n      .pipe(\r\n        tap(() => {\r\n          console.log('Intercept')\r\n        }),\r\n        catchError((error: HttpErrorResponse) => {\r\n          console.log('[Interceptor Error]: ', error)\r\n          if (error.status === 401) {\r\n            this.auth.logout()\r\n            this.router.navigate(['/admin', 'login'], {\r\n              queryParams: {\r\n                authFailed: true\r\n              }\r\n            })\r\n          }\r\n          return throwError(error)\r\n        })\r\n      )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}