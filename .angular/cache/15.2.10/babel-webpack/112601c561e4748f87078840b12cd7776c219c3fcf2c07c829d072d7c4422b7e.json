{"ast":null,"code":"const runningProcs = new Set();\nlet handlersInstalled = false;\n\n// NOTE: these signals aren't actually forwarded anywhere. they're trapped and\n// ignored until all child processes have exited. in our next breaking change\n// we should rename this\nconst forwardedSignals = ['SIGINT', 'SIGTERM'];\n\n// no-op, this is so receiving the signal doesn't cause us to exit immediately\n// instead, we exit after all children have exited when we re-send the signal\n// to ourselves. see the catch handler at the bottom of run-script-pkg.js\n// istanbul ignore next - this function does nothing\nconst handleSignal = () => {};\nconst setupListeners = () => {\n  for (const signal of forwardedSignals) {\n    process.on(signal, handleSignal);\n  }\n  handlersInstalled = true;\n};\nconst cleanupListeners = () => {\n  if (runningProcs.size === 0) {\n    for (const signal of forwardedSignals) {\n      process.removeListener(signal, handleSignal);\n    }\n    handlersInstalled = false;\n  }\n};\nconst add = proc => {\n  runningProcs.add(proc);\n  if (!handlersInstalled) {\n    setupListeners();\n  }\n  proc.once('exit', () => {\n    runningProcs.delete(proc);\n    cleanupListeners();\n  });\n};\nmodule.exports = {\n  add,\n  handleSignal,\n  forwardedSignals\n};","map":{"version":3,"names":["runningProcs","Set","handlersInstalled","forwardedSignals","handleSignal","setupListeners","signal","process","on","cleanupListeners","size","removeListener","add","proc","once","delete","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/@npmcli/run-script/lib/signal-manager.js"],"sourcesContent":["const runningProcs = new Set()\nlet handlersInstalled = false\n\n// NOTE: these signals aren't actually forwarded anywhere. they're trapped and\n// ignored until all child processes have exited. in our next breaking change\n// we should rename this\nconst forwardedSignals = [\n  'SIGINT',\n  'SIGTERM',\n]\n\n// no-op, this is so receiving the signal doesn't cause us to exit immediately\n// instead, we exit after all children have exited when we re-send the signal\n// to ourselves. see the catch handler at the bottom of run-script-pkg.js\n// istanbul ignore next - this function does nothing\nconst handleSignal = () => {}\nconst setupListeners = () => {\n  for (const signal of forwardedSignals) {\n    process.on(signal, handleSignal)\n  }\n  handlersInstalled = true\n}\n\nconst cleanupListeners = () => {\n  if (runningProcs.size === 0) {\n    for (const signal of forwardedSignals) {\n      process.removeListener(signal, handleSignal)\n    }\n    handlersInstalled = false\n  }\n}\n\nconst add = proc => {\n  runningProcs.add(proc)\n  if (!handlersInstalled) {\n    setupListeners()\n  }\n\n  proc.once('exit', () => {\n    runningProcs.delete(proc)\n    cleanupListeners()\n  })\n}\n\nmodule.exports = {\n  add,\n  handleSignal,\n  forwardedSignals,\n}\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,IAAIC,GAAG,EAAE;AAC9B,IAAIC,iBAAiB,GAAG,KAAK;;AAE7B;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,CACvB,QAAQ,EACR,SAAS,CACV;;AAED;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,MAAM,CAAC,CAAC;AAC7B,MAAMC,cAAc,GAAG,MAAM;EAC3B,KAAK,MAAMC,MAAM,IAAIH,gBAAgB,EAAE;IACrCI,OAAO,CAACC,EAAE,CAACF,MAAM,EAAEF,YAAY,CAAC;EAClC;EACAF,iBAAiB,GAAG,IAAI;AAC1B,CAAC;AAED,MAAMO,gBAAgB,GAAG,MAAM;EAC7B,IAAIT,YAAY,CAACU,IAAI,KAAK,CAAC,EAAE;IAC3B,KAAK,MAAMJ,MAAM,IAAIH,gBAAgB,EAAE;MACrCI,OAAO,CAACI,cAAc,CAACL,MAAM,EAAEF,YAAY,CAAC;IAC9C;IACAF,iBAAiB,GAAG,KAAK;EAC3B;AACF,CAAC;AAED,MAAMU,GAAG,GAAGC,IAAI,IAAI;EAClBb,YAAY,CAACY,GAAG,CAACC,IAAI,CAAC;EACtB,IAAI,CAACX,iBAAiB,EAAE;IACtBG,cAAc,EAAE;EAClB;EAEAQ,IAAI,CAACC,IAAI,CAAC,MAAM,EAAE,MAAM;IACtBd,YAAY,CAACe,MAAM,CAACF,IAAI,CAAC;IACzBJ,gBAAgB,EAAE;EACpB,CAAC,CAAC;AACJ,CAAC;AAEDO,MAAM,CAACC,OAAO,GAAG;EACfL,GAAG;EACHR,YAAY;EACZD;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}