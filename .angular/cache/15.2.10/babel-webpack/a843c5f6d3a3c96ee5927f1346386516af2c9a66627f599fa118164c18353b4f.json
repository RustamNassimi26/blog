{"ast":null,"code":"/* eslint-disable max-len */\n'use strict';\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : '';\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\nconst defaults = {\n  sshtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath,\n    path\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'master'), '/', path)}`,\n  browsetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({\n    type,\n    user,\n    project,\n    committish\n  }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    user,\n    project,\n    committish\n  }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n};\nconst gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  editpath: 'edit',\n  filetemplate: ({\n    auth,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n    if (type && type !== 'tree') {\n      return;\n    }\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'master'), '/', path, editpath)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (['get'].includes(aux)) {\n      return;\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    const path = url.pathname.slice(1);\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n    const segments = path.split('/');\n    let project = segments.pop();\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    const user = segments.join('/');\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    project,\n    committish,\n    path,\n    hashformat\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    user,\n    project,\n    committish,\n    path\n  }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({\n    type,\n    project,\n    committish\n  }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    project,\n    committish\n  }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    project\n  }) => `https://${domain}/${project}`,\n  gittemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    project,\n    committish\n  }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (aux === 'raw') {\n      return;\n    }\n    if (!project) {\n      if (!user) {\n        return;\n      }\n      project = user;\n      user = null;\n    }\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return;\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\nconst names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\nmodule.exports = gitHosts;","map":{"version":3,"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","edittemplate","editpath","path","browsetemplate","treepath","browsefiletemplate","fragment","hashformat","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","formatHashFragment","gitHosts","github","Object","assign","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","sourcehut","names","keys","byShortcut","byDomain","name","toLowerCase","replace","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/hosted-git-info/lib/git-host-info.js"],"sourcesContent":["/* eslint-disable max-len */\n'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath, path }) => `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'master'), '/', path)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment,\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  editpath: 'edit',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  },\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({ domain, user, project, committish, treepath, path, editpath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'master'), '/', path, editpath)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath }) => `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  },\n})\n\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({ domain, user, project }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}