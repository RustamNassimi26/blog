{"ast":null,"code":"import { Subject, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.error$ = new Subject();\n    }\n    get token() {\n      const expDate = new Date(localStorage.getItem('fb-token-exp'));\n      if (new Date() > expDate) {\n        this.logout();\n        return null;\n      }\n      return localStorage.getItem('fb-token');\n    }\n    login(user) {\n      user.returnSecureToken = true;\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, user).pipe(tap(setToken => this.setToken), catchError(this.handleError.bind(this)));\n    }\n    logout() {\n      this.setToken(null);\n    }\n    isAuthenticated() {\n      return !!this.token;\n    }\n    handleError(error) {\n      const {\n        message\n      } = error.error.error;\n      switch (message) {\n        case 'INVALID_EMAIL':\n          this.error$.next('Неверный email');\n          break;\n        case 'INVALID_PASSWORD':\n          this.error$.next('Неверный password');\n          break;\n        case 'EMAIL_NOT_FOUND':\n          this.error$.next('Email не найден');\n          break;\n      }\n      return throwError(error);\n    }\n    setToken(response) {\n      if (response) {\n        const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000);\n        localStorage.setItem('fb-token', response.idToken);\n        localStorage.setItem('fb-token-exp', expDate.toString());\n      } else {\n        localStorage.clear();\n      }\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}