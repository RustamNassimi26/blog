{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCommandModuleToYargs = exports.demandCommandFailureMessage = void 0;\nconst command_module_1 = require(\"../command-module\");\nexports.demandCommandFailureMessage = `You need to specify a command before moving on. Use '--help' to view the available commands.`;\nfunction addCommandModuleToYargs(localYargs, commandModule, context) {\n  const cmd = new commandModule(context);\n  const {\n    args: {\n      options: {\n        jsonHelp\n      }\n    },\n    workspace\n  } = context;\n  const describe = jsonHelp ? cmd.fullDescribe : cmd.describe;\n  return localYargs.command({\n    command: cmd.command,\n    aliases: cmd.aliases,\n    describe:\n    // We cannot add custom fields in help, such as long command description which is used in AIO.\n    // Therefore, we get around this by adding a complex object as a string which we later parse when generating the help files.\n    typeof describe === 'object' ? JSON.stringify(describe) : describe,\n    deprecated: cmd.deprecated,\n    builder: argv => {\n      // Skip scope validation when running with '--json-help' since it's easier to generate the output for all commands this way.\n      const isInvalidScope = !jsonHelp && (cmd.scope === command_module_1.CommandScope.In && !workspace || cmd.scope === command_module_1.CommandScope.Out && workspace);\n      if (isInvalidScope) {\n        throw new command_module_1.CommandModuleError(`This command is not available when running the Angular CLI ${workspace ? 'inside' : 'outside'} a workspace.`);\n      }\n      return cmd.builder(argv);\n    },\n    handler: args => cmd.handler(args)\n  });\n}\nexports.addCommandModuleToYargs = addCommandModuleToYargs;","map":{"version":3,"names":["Object","defineProperty","exports","value","addCommandModuleToYargs","demandCommandFailureMessage","command_module_1","require","localYargs","commandModule","context","cmd","args","options","jsonHelp","workspace","describe","fullDescribe","command","aliases","JSON","stringify","deprecated","builder","argv","isInvalidScope","scope","CommandScope","In","Out","CommandModuleError","handler"],"sources":["I:/Angular/angular-blog/node_modules/@angular/cli/src/command-builder/utilities/command.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addCommandModuleToYargs = exports.demandCommandFailureMessage = void 0;\nconst command_module_1 = require(\"../command-module\");\nexports.demandCommandFailureMessage = `You need to specify a command before moving on. Use '--help' to view the available commands.`;\nfunction addCommandModuleToYargs(localYargs, commandModule, context) {\n    const cmd = new commandModule(context);\n    const { args: { options: { jsonHelp }, }, workspace, } = context;\n    const describe = jsonHelp ? cmd.fullDescribe : cmd.describe;\n    return localYargs.command({\n        command: cmd.command,\n        aliases: cmd.aliases,\n        describe: \n        // We cannot add custom fields in help, such as long command description which is used in AIO.\n        // Therefore, we get around this by adding a complex object as a string which we later parse when generating the help files.\n        typeof describe === 'object' ? JSON.stringify(describe) : describe,\n        deprecated: cmd.deprecated,\n        builder: (argv) => {\n            // Skip scope validation when running with '--json-help' since it's easier to generate the output for all commands this way.\n            const isInvalidScope = !jsonHelp &&\n                ((cmd.scope === command_module_1.CommandScope.In && !workspace) ||\n                    (cmd.scope === command_module_1.CommandScope.Out && workspace));\n            if (isInvalidScope) {\n                throw new command_module_1.CommandModuleError(`This command is not available when running the Angular CLI ${workspace ? 'inside' : 'outside'} a workspace.`);\n            }\n            return cmd.builder(argv);\n        },\n        handler: (args) => cmd.handler(args),\n    });\n}\nexports.addCommandModuleToYargs = addCommandModuleToYargs;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,uBAAuB,GAAGF,OAAO,CAACG,2BAA2B,GAAG,KAAK,CAAC;AAC9E,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACrDL,OAAO,CAACG,2BAA2B,GAAI,8FAA6F;AACpI,SAASD,uBAAuB,CAACI,UAAU,EAAEC,aAAa,EAAEC,OAAO,EAAE;EACjE,MAAMC,GAAG,GAAG,IAAIF,aAAa,CAACC,OAAO,CAAC;EACtC,MAAM;IAAEE,IAAI,EAAE;MAAEC,OAAO,EAAE;QAAEC;MAAS;IAAG,CAAC;IAAEC;EAAW,CAAC,GAAGL,OAAO;EAChE,MAAMM,QAAQ,GAAGF,QAAQ,GAAGH,GAAG,CAACM,YAAY,GAAGN,GAAG,CAACK,QAAQ;EAC3D,OAAOR,UAAU,CAACU,OAAO,CAAC;IACtBA,OAAO,EAAEP,GAAG,CAACO,OAAO;IACpBC,OAAO,EAAER,GAAG,CAACQ,OAAO;IACpBH,QAAQ;IACR;IACA;IACA,OAAOA,QAAQ,KAAK,QAAQ,GAAGI,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC,GAAGA,QAAQ;IAClEM,UAAU,EAAEX,GAAG,CAACW,UAAU;IAC1BC,OAAO,EAAGC,IAAI,IAAK;MACf;MACA,MAAMC,cAAc,GAAG,CAACX,QAAQ,KAC1BH,GAAG,CAACe,KAAK,KAAKpB,gBAAgB,CAACqB,YAAY,CAACC,EAAE,IAAI,CAACb,SAAS,IACzDJ,GAAG,CAACe,KAAK,KAAKpB,gBAAgB,CAACqB,YAAY,CAACE,GAAG,IAAId,SAAU,CAAC;MACvE,IAAIU,cAAc,EAAE;QAChB,MAAM,IAAInB,gBAAgB,CAACwB,kBAAkB,CAAE,8DAA6Df,SAAS,GAAG,QAAQ,GAAG,SAAU,eAAc,CAAC;MAChK;MACA,OAAOJ,GAAG,CAACY,OAAO,CAACC,IAAI,CAAC;IAC5B,CAAC;IACDO,OAAO,EAAGnB,IAAI,IAAKD,GAAG,CAACoB,OAAO,CAACnB,IAAI;EACvC,CAAC,CAAC;AACN;AACAV,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}