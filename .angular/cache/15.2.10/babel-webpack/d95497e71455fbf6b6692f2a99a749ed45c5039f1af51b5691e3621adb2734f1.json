{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"I:/Angular/angular-blog/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArchitectCommandModule = void 0;\nconst config_1 = require(\"../utilities/config\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst architect_base_command_module_1 = require(\"./architect-base-command-module\");\nconst command_module_1 = require(\"./command-module\");\nclass ArchitectCommandModule extends architect_base_command_module_1.ArchitectBaseCommandModule {\n  builder(argv) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const project = _this.getArchitectProject();\n      const {\n        jsonHelp,\n        getYargsCompletions,\n        help\n      } = _this.context.args.options;\n      const localYargs = argv.positional('project', {\n        describe: 'The name of the project to build. Can be an application or a library.',\n        type: 'string',\n        // Hide choices from JSON help so that we don't display them in AIO.\n        choices: jsonHelp ? undefined : _this.getProjectChoices()\n      }).option('configuration', {\n        describe: `One or more named builder configurations as a comma-separated ` + `list as specified in the \"configurations\" section in angular.json.\\n` + `The builder uses the named configurations to run the given target.\\n` + `For more information, see https://angular.io/guide/workspace-config#alternate-build-configurations.`,\n        alias: 'c',\n        type: 'string',\n        // Show only in when using --help and auto completion because otherwise comma seperated configuration values will be invalid.\n        // Also, hide choices from JSON help so that we don't display them in AIO.\n        choices: (getYargsCompletions || help) && !jsonHelp && project ? _this.getConfigurationChoices(project) : undefined\n      }).strict();\n      if (!project) {\n        return localYargs;\n      }\n      const target = _this.getArchitectTarget();\n      const schemaOptions = yield _this.getArchitectTargetOptions({\n        project,\n        target\n      });\n      return _this.addSchemaOptionsToCommand(localYargs, schemaOptions);\n    })();\n  }\n  run(options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const target = _this2.getArchitectTarget();\n      const {\n        configuration = '',\n        project,\n        ...architectOptions\n      } = options;\n      if (!project) {\n        // This runs each target sequentially.\n        // Running them in parallel would jumble the log messages.\n        let result = 0;\n        const projectNames = _this2.getProjectNamesByTarget(target);\n        if (!projectNames) {\n          return _this2.onMissingTarget('Cannot determine project or target for command.');\n        }\n        for (const project of projectNames) {\n          result |= yield _this2.runSingleTarget({\n            configuration,\n            target,\n            project\n          }, architectOptions);\n        }\n        return result;\n      } else {\n        return yield _this2.runSingleTarget({\n          configuration,\n          target,\n          project\n        }, architectOptions);\n      }\n    })();\n  }\n  getArchitectProject() {\n    const {\n      options,\n      positional\n    } = this.context.args;\n    const [, projectName] = positional;\n    if (projectName) {\n      return projectName;\n    }\n    // Yargs allows positional args to be used as flags.\n    if (typeof options['project'] === 'string') {\n      return options['project'];\n    }\n    const target = this.getArchitectTarget();\n    const projectFromTarget = this.getProjectNamesByTarget(target);\n    return (projectFromTarget === null || projectFromTarget === void 0 ? void 0 : projectFromTarget.length) ? projectFromTarget[0] : undefined;\n  }\n  getProjectNamesByTarget(target) {\n    const workspace = this.getWorkspaceOrThrow();\n    const allProjectsForTargetName = [];\n    for (const [name, project] of workspace.projects) {\n      if (project.targets.has(target)) {\n        allProjectsForTargetName.push(name);\n      }\n    }\n    if (allProjectsForTargetName.length === 0) {\n      return undefined;\n    }\n    if (this.multiTarget) {\n      // For multi target commands, we always list all projects that have the target.\n      return allProjectsForTargetName;\n    } else {\n      if (allProjectsForTargetName.length === 1) {\n        return allProjectsForTargetName;\n      }\n      const maybeProject = (0, config_1.getProjectByCwd)(workspace);\n      if (maybeProject) {\n        return allProjectsForTargetName.includes(maybeProject) ? [maybeProject] : undefined;\n      }\n      const {\n        getYargsCompletions,\n        help\n      } = this.context.args.options;\n      if (!getYargsCompletions && !help) {\n        // Only issue the below error when not in help / completion mode.\n        throw new command_module_1.CommandModuleError('Cannot determine project for command.\\n' + 'This is a multi-project workspace and more than one project supports this command. ' + `Run \"ng ${this.command}\" to execute the command for a specific project or change the current ` + 'working directory to a project directory.\\n\\n' + `Available projects are:\\n${allProjectsForTargetName.sort().map(p => `- ${p}`).join('\\n')}`);\n      }\n    }\n    return undefined;\n  }\n  /** @returns a sorted list of project names to be used for auto completion. */\n  getProjectChoices() {\n    const {\n      workspace\n    } = this.context;\n    return workspace ? [...workspace.projects.keys()].sort() : undefined;\n  }\n  /** @returns a sorted list of configuration names to be used for auto completion. */\n  getConfigurationChoices(project) {\n    var _a, _b;\n    const projectDefinition = (_a = this.context.workspace) === null || _a === void 0 ? void 0 : _a.projects.get(project);\n    if (!projectDefinition) {\n      return undefined;\n    }\n    const target = this.getArchitectTarget();\n    const configurations = (_b = projectDefinition.targets.get(target)) === null || _b === void 0 ? void 0 : _b.configurations;\n    return configurations ? Object.keys(configurations).sort() : undefined;\n  }\n}\n__decorate([memoize_1.memoize], ArchitectCommandModule.prototype, \"getProjectNamesByTarget\", null);\nexports.ArchitectCommandModule = ArchitectCommandModule;","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","ArchitectCommandModule","config_1","require","memoize_1","architect_base_command_module_1","command_module_1","ArchitectBaseCommandModule","builder","argv","project","getArchitectProject","jsonHelp","getYargsCompletions","help","context","args","options","localYargs","positional","describe","type","choices","undefined","getProjectChoices","option","alias","getConfigurationChoices","strict","getArchitectTarget","schemaOptions","getArchitectTargetOptions","addSchemaOptionsToCommand","run","configuration","architectOptions","result","projectNames","getProjectNamesByTarget","onMissingTarget","runSingleTarget","projectName","projectFromTarget","workspace","getWorkspaceOrThrow","allProjectsForTargetName","name","projects","targets","has","push","multiTarget","maybeProject","getProjectByCwd","includes","CommandModuleError","command","sort","map","p","join","keys","_a","_b","projectDefinition","get","configurations","memoize","prototype"],"sources":["I:/Angular/angular-blog/node_modules/@angular/cli/src/command-builder/architect-command-module.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArchitectCommandModule = void 0;\nconst config_1 = require(\"../utilities/config\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst architect_base_command_module_1 = require(\"./architect-base-command-module\");\nconst command_module_1 = require(\"./command-module\");\nclass ArchitectCommandModule extends architect_base_command_module_1.ArchitectBaseCommandModule {\n    async builder(argv) {\n        const project = this.getArchitectProject();\n        const { jsonHelp, getYargsCompletions, help } = this.context.args.options;\n        const localYargs = argv\n            .positional('project', {\n            describe: 'The name of the project to build. Can be an application or a library.',\n            type: 'string',\n            // Hide choices from JSON help so that we don't display them in AIO.\n            choices: jsonHelp ? undefined : this.getProjectChoices(),\n        })\n            .option('configuration', {\n            describe: `One or more named builder configurations as a comma-separated ` +\n                `list as specified in the \"configurations\" section in angular.json.\\n` +\n                `The builder uses the named configurations to run the given target.\\n` +\n                `For more information, see https://angular.io/guide/workspace-config#alternate-build-configurations.`,\n            alias: 'c',\n            type: 'string',\n            // Show only in when using --help and auto completion because otherwise comma seperated configuration values will be invalid.\n            // Also, hide choices from JSON help so that we don't display them in AIO.\n            choices: (getYargsCompletions || help) && !jsonHelp && project\n                ? this.getConfigurationChoices(project)\n                : undefined,\n        })\n            .strict();\n        if (!project) {\n            return localYargs;\n        }\n        const target = this.getArchitectTarget();\n        const schemaOptions = await this.getArchitectTargetOptions({\n            project,\n            target,\n        });\n        return this.addSchemaOptionsToCommand(localYargs, schemaOptions);\n    }\n    async run(options) {\n        const target = this.getArchitectTarget();\n        const { configuration = '', project, ...architectOptions } = options;\n        if (!project) {\n            // This runs each target sequentially.\n            // Running them in parallel would jumble the log messages.\n            let result = 0;\n            const projectNames = this.getProjectNamesByTarget(target);\n            if (!projectNames) {\n                return this.onMissingTarget('Cannot determine project or target for command.');\n            }\n            for (const project of projectNames) {\n                result |= await this.runSingleTarget({ configuration, target, project }, architectOptions);\n            }\n            return result;\n        }\n        else {\n            return await this.runSingleTarget({ configuration, target, project }, architectOptions);\n        }\n    }\n    getArchitectProject() {\n        const { options, positional } = this.context.args;\n        const [, projectName] = positional;\n        if (projectName) {\n            return projectName;\n        }\n        // Yargs allows positional args to be used as flags.\n        if (typeof options['project'] === 'string') {\n            return options['project'];\n        }\n        const target = this.getArchitectTarget();\n        const projectFromTarget = this.getProjectNamesByTarget(target);\n        return (projectFromTarget === null || projectFromTarget === void 0 ? void 0 : projectFromTarget.length) ? projectFromTarget[0] : undefined;\n    }\n    getProjectNamesByTarget(target) {\n        const workspace = this.getWorkspaceOrThrow();\n        const allProjectsForTargetName = [];\n        for (const [name, project] of workspace.projects) {\n            if (project.targets.has(target)) {\n                allProjectsForTargetName.push(name);\n            }\n        }\n        if (allProjectsForTargetName.length === 0) {\n            return undefined;\n        }\n        if (this.multiTarget) {\n            // For multi target commands, we always list all projects that have the target.\n            return allProjectsForTargetName;\n        }\n        else {\n            if (allProjectsForTargetName.length === 1) {\n                return allProjectsForTargetName;\n            }\n            const maybeProject = (0, config_1.getProjectByCwd)(workspace);\n            if (maybeProject) {\n                return allProjectsForTargetName.includes(maybeProject) ? [maybeProject] : undefined;\n            }\n            const { getYargsCompletions, help } = this.context.args.options;\n            if (!getYargsCompletions && !help) {\n                // Only issue the below error when not in help / completion mode.\n                throw new command_module_1.CommandModuleError('Cannot determine project for command.\\n' +\n                    'This is a multi-project workspace and more than one project supports this command. ' +\n                    `Run \"ng ${this.command}\" to execute the command for a specific project or change the current ` +\n                    'working directory to a project directory.\\n\\n' +\n                    `Available projects are:\\n${allProjectsForTargetName\n                        .sort()\n                        .map((p) => `- ${p}`)\n                        .join('\\n')}`);\n            }\n        }\n        return undefined;\n    }\n    /** @returns a sorted list of project names to be used for auto completion. */\n    getProjectChoices() {\n        const { workspace } = this.context;\n        return workspace ? [...workspace.projects.keys()].sort() : undefined;\n    }\n    /** @returns a sorted list of configuration names to be used for auto completion. */\n    getConfigurationChoices(project) {\n        var _a, _b;\n        const projectDefinition = (_a = this.context.workspace) === null || _a === void 0 ? void 0 : _a.projects.get(project);\n        if (!projectDefinition) {\n            return undefined;\n        }\n        const target = this.getArchitectTarget();\n        const configurations = (_b = projectDefinition.targets.get(target)) === null || _b === void 0 ? void 0 : _b.configurations;\n        return configurations ? Object.keys(configurations).sort() : undefined;\n    }\n}\n__decorate([\n    memoize_1.memoize\n], ArchitectCommandModule.prototype, \"getProjectNamesByTarget\", null);\nexports.ArchitectCommandModule = ArchitectCommandModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}