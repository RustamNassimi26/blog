{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"I:/Angular/angular-blog/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst fs = require('@npmcli/fs');\nconst fsm = require('fs-minipass');\nconst ssri = require('ssri');\nconst contentPath = require('./path');\nconst Pipeline = require('minipass-pipeline');\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\nfunction read(_x, _x2) {\n  return _read.apply(this, arguments);\n}\nfunction _read() {\n  _read = _asyncToGenerator(function* (cache, integrity, opts = {}) {\n    const {\n      size\n    } = opts;\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (cpath, sri) {\n        // get size\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n      return function (_x10, _x11) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    if (typeof size === 'number' && stat.size !== size) {\n      throw sizeError(size, stat.size);\n    }\n    if (stat.size > MAX_SINGLE_READ_SIZE) {\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    }\n    const data = yield fs.readFile(cpath, {\n      encoding: null\n    });\n    if (!ssri.checkData(data, sri)) {\n      throw integrityError(sri, cpath);\n    }\n    return data;\n  });\n  return _read.apply(this, arguments);\n}\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\nmodule.exports.sync = readSync;\nfunction readSync(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath, {\n      encoding: null\n    });\n    if (typeof size === 'number' && size !== data.length) {\n      throw sizeError(size, data.length);\n    }\n    if (ssri.checkData(data, sri)) {\n      return data;\n    }\n    throw integrityError(sri, cpath);\n  });\n}\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\nfunction readStream(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline();\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then( /*#__PURE__*/_asyncToGenerator(function* () {\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (cpath, sri) {\n        // just stat to ensure it exists\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size));\n    }\n    return readPipeline(cpath, stat.size, sri, stream);\n  })).catch(err => stream.emit('error', err));\n  return stream;\n}\nmodule.exports.copy = copy;\nmodule.exports.copy.sync = copySync;\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest);\n  });\n}\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\nmodule.exports.hasContent = hasContent;\nfunction hasContent(_x5, _x6) {\n  return _hasContent.apply(this, arguments);\n}\nfunction _hasContent() {\n  _hasContent = _asyncToGenerator(function* (cache, integrity) {\n    if (!integrity) {\n      return false;\n    }\n    try {\n      return yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (cpath, sri) {\n          const stat = yield fs.stat(cpath);\n          return {\n            size: stat.size,\n            sri,\n            stat\n          };\n        });\n        return function (_x12, _x13) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n  return _hasContent.apply(this, arguments);\n}\nmodule.exports.hasContent.sync = hasContentSync;\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.statSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n}\nfunction withContentSri(_x7, _x8, _x9) {\n  return _withContentSri.apply(this, arguments);\n}\nfunction _withContentSri() {\n  _withContentSri = _asyncToGenerator(function* (cache, integrity, fn) {\n    const sri = ssri.parse(integrity);\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      const results = yield Promise.all(digests.map( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (meta) {\n          try {\n            return yield withContentSri(cache, meta, fn);\n          } catch (err) {\n            if (err.code === 'ENOENT') {\n              return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n                code: 'ENOENT'\n              });\n            }\n            return err;\n          }\n        });\n        return function (_x14) {\n          return _ref5.apply(this, arguments);\n        };\n      }()));\n      // Return the first non error if it is found\n      const result = results.find(r => !(r instanceof Error));\n      if (result) {\n        return result;\n      }\n\n      // Throw the No matching content found error\n      const enoentError = results.find(r => r.code === 'ENOENT');\n      if (enoentError) {\n        throw enoentError;\n      }\n\n      // Throw generic error\n      throw results.find(r => r instanceof Error);\n    }\n  });\n  return _withContentSri.apply(this, arguments);\n}\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity);\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n    throw lastErr;\n  }\n}\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["fs","require","fsm","ssri","contentPath","Pipeline","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","size","stat","cpath","sri","withContentSri","sizeError","readPipeline","concat","data","readFile","encoding","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","sync","readSync","withContentSriSync","readFileSync","length","readStream","Promise","resolve","then","emit","catch","err","copy","copySync","dest","copyFile","copyFileSync","hasContent","code","process","platform","hasContentSync","statSync","fn","parse","algo","pickAlgorithm","digests","results","all","map","meta","Object","assign","Error","toString","result","find","r","enoentError","lastErr","expected","found","path"],"sources":["I:/Angular/angular-blog/node_modules/make-fetch-happen/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst fs = require('@npmcli/fs')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nasync function read (cache, integrity, opts = {}) {\n  const { size } = opts\n  const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n    // get size\n    const stat = await fs.stat(cpath)\n    return { stat, cpath, sri }\n  })\n  if (typeof size === 'number' && stat.size !== size) {\n    throw sizeError(size, stat.size)\n  }\n\n  if (stat.size > MAX_SINGLE_READ_SIZE) {\n    return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n  }\n\n  const data = await fs.readFile(cpath, { encoding: null })\n  if (!ssri.checkData(data, sri)) {\n    throw integrityError(sri, cpath)\n  }\n\n  return data\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.sync = readSync\n\nfunction readSync (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath, { encoding: null })\n    if (typeof size === 'number' && size !== data.length) {\n      throw sizeError(size, data.length)\n    }\n\n    if (ssri.checkData(data, sri)) {\n      return data\n    }\n\n    throw integrityError(sri, cpath)\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then(async () => {\n    const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n      // just stat to ensure it exists\n      const stat = await fs.stat(cpath)\n      return { stat, cpath, sri }\n    })\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size))\n    }\n\n    return readPipeline(cpath, stat.size, sri, stream)\n  }).catch(err => stream.emit('error', err))\n\n  return stream\n}\n\nmodule.exports.copy = copy\nmodule.exports.copy.sync = copySync\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nasync function hasContent (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  try {\n    return await withContentSri(cache, integrity, async (cpath, sri) => {\n      const stat = await fs.stat(cpath)\n      return { size: stat.size, sri, stat }\n    })\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false\n    }\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') {\n        throw err\n      } else {\n        return false\n      }\n    }\n  }\n}\n\nmodule.exports.hasContent.sync = hasContentSync\n\nfunction hasContentSync (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.statSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false\n      }\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err\n        } else {\n          return false\n        }\n      }\n    }\n  })\n}\n\nasync function withContentSri (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    // Can't use race here because a generic error can happen before\n    // a ENOENT error, and can happen before a valid result\n    const results = await Promise.all(digests.map(async (meta) => {\n      try {\n        return await withContentSri(cache, meta, fn)\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return Object.assign(\n            new Error('No matching content found for ' + sri.toString()),\n            { code: 'ENOENT' }\n          )\n        }\n        return err\n      }\n    }))\n    // Return the first non error if it is found\n    const result = results.find((r) => !(r instanceof Error))\n    if (result) {\n      return result\n    }\n\n    // Throw the No matching content found error\n    const enoentError = results.find((r) => r.code === 'ENOENT')\n    if (enoentError) {\n      throw enoentError\n    }\n\n    // Throw generic error\n    throw results.find((r) => r instanceof Error)\n  }\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    throw lastErr\n  }\n}\n\nfunction sizeError (expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}