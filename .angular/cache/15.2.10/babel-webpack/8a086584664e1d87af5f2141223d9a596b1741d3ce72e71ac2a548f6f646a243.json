{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateOptionsWithSchema = exports.InvalidInputOptions = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nclass InvalidInputOptions extends core_1.schema.SchemaValidationException {\n  constructor(options, errors) {\n    super(errors, `Schematic input does not validate against the Schema: ${JSON.stringify(options)}\\nErrors:\\n`);\n  }\n}\nexports.InvalidInputOptions = InvalidInputOptions;\n// This can only be used in NodeJS.\nfunction validateOptionsWithSchema(registry) {\n  return (schematic, options, context) => {\n    // Prevent a schematic from changing the options object by making a copy of it.\n    options = (0, core_1.deepCopy)(options);\n    const withPrompts = context ? context.interactive : true;\n    if (schematic.schema && schematic.schemaJson) {\n      // Make a deep copy of options.\n      return registry.compile(schematic.schemaJson).pipe((0, operators_1.mergeMap)(validator => validator(options, {\n        withPrompts\n      })), (0, operators_1.first)(), (0, operators_1.map)(result => {\n        if (!result.success) {\n          throw new InvalidInputOptions(options, result.errors || []);\n        }\n        return options;\n      }));\n    }\n    return (0, rxjs_1.of)(options);\n  };\n}\nexports.validateOptionsWithSchema = validateOptionsWithSchema;","map":{"version":3,"names":["Object","defineProperty","exports","value","validateOptionsWithSchema","InvalidInputOptions","core_1","require","rxjs_1","operators_1","schema","SchemaValidationException","constructor","options","errors","JSON","stringify","registry","schematic","context","deepCopy","withPrompts","interactive","schemaJson","compile","pipe","mergeMap","validator","first","map","result","success","of"],"sources":["I:/Angular/angular-blog/node_modules/@angular-devkit/schematics/tools/schema-option-transform.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateOptionsWithSchema = exports.InvalidInputOptions = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nclass InvalidInputOptions extends core_1.schema.SchemaValidationException {\n    constructor(options, errors) {\n        super(errors, `Schematic input does not validate against the Schema: ${JSON.stringify(options)}\\nErrors:\\n`);\n    }\n}\nexports.InvalidInputOptions = InvalidInputOptions;\n// This can only be used in NodeJS.\nfunction validateOptionsWithSchema(registry) {\n    return (schematic, options, context) => {\n        // Prevent a schematic from changing the options object by making a copy of it.\n        options = (0, core_1.deepCopy)(options);\n        const withPrompts = context ? context.interactive : true;\n        if (schematic.schema && schematic.schemaJson) {\n            // Make a deep copy of options.\n            return registry.compile(schematic.schemaJson).pipe((0, operators_1.mergeMap)((validator) => validator(options, { withPrompts })), (0, operators_1.first)(), (0, operators_1.map)((result) => {\n                if (!result.success) {\n                    throw new InvalidInputOptions(options, result.errors || []);\n                }\n                return options;\n            }));\n        }\n        return (0, rxjs_1.of)(options);\n    };\n}\nexports.validateOptionsWithSchema = validateOptionsWithSchema;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAGF,OAAO,CAACG,mBAAmB,GAAG,KAAK,CAAC;AACxE,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9C,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAME,WAAW,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC7C,MAAMF,mBAAmB,SAASC,MAAM,CAACI,MAAM,CAACC,yBAAyB,CAAC;EACtEC,WAAW,CAACC,OAAO,EAAEC,MAAM,EAAE;IACzB,KAAK,CAACA,MAAM,EAAG,yDAAwDC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAE,aAAY,CAAC;EAChH;AACJ;AACAX,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjD;AACA,SAASD,yBAAyB,CAACa,QAAQ,EAAE;EACzC,OAAO,CAACC,SAAS,EAAEL,OAAO,EAAEM,OAAO,KAAK;IACpC;IACAN,OAAO,GAAG,CAAC,CAAC,EAAEP,MAAM,CAACc,QAAQ,EAAEP,OAAO,CAAC;IACvC,MAAMQ,WAAW,GAAGF,OAAO,GAAGA,OAAO,CAACG,WAAW,GAAG,IAAI;IACxD,IAAIJ,SAAS,CAACR,MAAM,IAAIQ,SAAS,CAACK,UAAU,EAAE;MAC1C;MACA,OAAON,QAAQ,CAACO,OAAO,CAACN,SAAS,CAACK,UAAU,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,EAAEhB,WAAW,CAACiB,QAAQ,EAAGC,SAAS,IAAKA,SAAS,CAACd,OAAO,EAAE;QAAEQ;MAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEZ,WAAW,CAACmB,KAAK,GAAG,EAAE,CAAC,CAAC,EAAEnB,WAAW,CAACoB,GAAG,EAAGC,MAAM,IAAK;QACzL,IAAI,CAACA,MAAM,CAACC,OAAO,EAAE;UACjB,MAAM,IAAI1B,mBAAmB,CAACQ,OAAO,EAAEiB,MAAM,CAAChB,MAAM,IAAI,EAAE,CAAC;QAC/D;QACA,OAAOD,OAAO;MAClB,CAAC,CAAC,CAAC;IACP;IACA,OAAO,CAAC,CAAC,EAAEL,MAAM,CAACwB,EAAE,EAAEnB,OAAO,CAAC;EAClC,CAAC;AACL;AACAX,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}