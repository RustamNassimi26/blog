{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"I:/Angular/angular-blog/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst fs = require('fs/promises');\nconst fsm = require('fs-minipass');\nconst ssri = require('ssri');\nconst contentPath = require('./path');\nconst Pipeline = require('minipass-pipeline');\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\nfunction read(_x, _x2) {\n  return _read.apply(this, arguments);\n}\nfunction _read() {\n  _read = _asyncToGenerator(function* (cache, integrity, opts = {}) {\n    const {\n      size\n    } = opts;\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (cpath, sri) {\n        // get size\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n      return function (_x10, _x11) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    if (typeof size === 'number' && stat.size !== size) {\n      throw sizeError(size, stat.size);\n    }\n    if (stat.size > MAX_SINGLE_READ_SIZE) {\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    }\n    const data = yield fs.readFile(cpath, {\n      encoding: null\n    });\n    if (!ssri.checkData(data, sri)) {\n      throw integrityError(sri, cpath);\n    }\n    return data;\n  });\n  return _read.apply(this, arguments);\n}\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\nfunction readStream(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline();\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then( /*#__PURE__*/_asyncToGenerator(function* () {\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (cpath, sri) {\n        // just stat to ensure it exists\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size));\n    }\n    return readPipeline(cpath, stat.size, sri, stream);\n  })).catch(err => stream.emit('error', err));\n  return stream;\n}\nmodule.exports.copy = copy;\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest);\n  });\n}\nmodule.exports.hasContent = hasContent;\nfunction hasContent(_x5, _x6) {\n  return _hasContent.apply(this, arguments);\n}\nfunction _hasContent() {\n  _hasContent = _asyncToGenerator(function* (cache, integrity) {\n    if (!integrity) {\n      return false;\n    }\n    try {\n      return yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (cpath, sri) {\n          const stat = yield fs.stat(cpath);\n          return {\n            size: stat.size,\n            sri,\n            stat\n          };\n        });\n        return function (_x12, _x13) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n  return _hasContent.apply(this, arguments);\n}\nfunction withContentSri(_x7, _x8, _x9) {\n  return _withContentSri.apply(this, arguments);\n}\nfunction _withContentSri() {\n  _withContentSri = _asyncToGenerator(function* (cache, integrity, fn) {\n    const sri = ssri.parse(integrity);\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      const results = yield Promise.all(digests.map( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (meta) {\n          try {\n            return yield withContentSri(cache, meta, fn);\n          } catch (err) {\n            if (err.code === 'ENOENT') {\n              return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n                code: 'ENOENT'\n              });\n            }\n            return err;\n          }\n        });\n        return function (_x14) {\n          return _ref5.apply(this, arguments);\n        };\n      }()));\n      // Return the first non error if it is found\n      const result = results.find(r => !(r instanceof Error));\n      if (result) {\n        return result;\n      }\n\n      // Throw the No matching content found error\n      const enoentError = results.find(r => r.code === 'ENOENT');\n      if (enoentError) {\n        throw enoentError;\n      }\n\n      // Throw generic error\n      throw results.find(r => r instanceof Error);\n    }\n  });\n  return _withContentSri.apply(this, arguments);\n}\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["fs","require","fsm","ssri","contentPath","Pipeline","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","size","stat","cpath","sri","withContentSri","sizeError","readPipeline","concat","data","readFile","encoding","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","readStream","Promise","resolve","then","emit","catch","err","copy","dest","copyFile","hasContent","code","process","platform","fn","parse","algo","pickAlgorithm","digests","length","results","all","map","meta","Object","assign","Error","toString","result","find","r","enoentError","expected","found","path"],"sources":["I:/Angular/angular-blog/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs/promises')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nasync function read (cache, integrity, opts = {}) {\n  const { size } = opts\n  const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n    // get size\n    const stat = await fs.stat(cpath)\n    return { stat, cpath, sri }\n  })\n  if (typeof size === 'number' && stat.size !== size) {\n    throw sizeError(size, stat.size)\n  }\n\n  if (stat.size > MAX_SINGLE_READ_SIZE) {\n    return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n  }\n\n  const data = await fs.readFile(cpath, { encoding: null })\n  if (!ssri.checkData(data, sri)) {\n    throw integrityError(sri, cpath)\n  }\n\n  return data\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then(async () => {\n    const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n      // just stat to ensure it exists\n      const stat = await fs.stat(cpath)\n      return { stat, cpath, sri }\n    })\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size))\n    }\n\n    return readPipeline(cpath, stat.size, sri, stream)\n  }).catch(err => stream.emit('error', err))\n\n  return stream\n}\n\nmodule.exports.copy = copy\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nasync function hasContent (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  try {\n    return await withContentSri(cache, integrity, async (cpath, sri) => {\n      const stat = await fs.stat(cpath)\n      return { size: stat.size, sri, stat }\n    })\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false\n    }\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') {\n        throw err\n      } else {\n        return false\n      }\n    }\n  }\n}\n\nasync function withContentSri (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    // Can't use race here because a generic error can happen before\n    // a ENOENT error, and can happen before a valid result\n    const results = await Promise.all(digests.map(async (meta) => {\n      try {\n        return await withContentSri(cache, meta, fn)\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return Object.assign(\n            new Error('No matching content found for ' + sri.toString()),\n            { code: 'ENOENT' }\n          )\n        }\n        return err\n      }\n    }))\n    // Return the first non error if it is found\n    const result = results.find((r) => !(r instanceof Error))\n    if (result) {\n      return result\n    }\n\n    // Throw the No matching content found error\n    const enoentError = results.find((r) => r.code === 'ENOENT')\n    if (enoentError) {\n      throw enoentError\n    }\n\n    // Throw generic error\n    throw results.find((r) => r instanceof Error)\n  }\n}\n\nfunction sizeError (expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}