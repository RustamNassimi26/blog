{"ast":null,"code":"var _asyncToGenerator = require(\"I:/Angular/angular-blog/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  dirname,\n  join,\n  resolve,\n  relative,\n  isAbsolute\n} = require('path');\nconst fs = require('fs/promises');\nconst pathExists = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (path) {\n    try {\n      yield fs.access(path);\n      return true;\n    } catch (er) {\n      return er.code !== 'ENOENT';\n    }\n  });\n  return function pathExists(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst moveFile = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (source, destination, options = {}, root = true, symlinks = []) {\n    if (!source || !destination) {\n      throw new TypeError('`source` and `destination` file required');\n    }\n    options = {\n      overwrite: true,\n      ...options\n    };\n    if (!options.overwrite && (yield pathExists(destination))) {\n      throw new Error(`The destination file exists: ${destination}`);\n    }\n    yield fs.mkdir(dirname(destination), {\n      recursive: true\n    });\n    try {\n      yield fs.rename(source, destination);\n    } catch (error) {\n      if (error.code === 'EXDEV' || error.code === 'EPERM') {\n        const sourceStat = yield fs.lstat(source);\n        if (sourceStat.isDirectory()) {\n          const files = yield fs.readdir(source);\n          yield Promise.all(files.map(file => moveFile(join(source, file), join(destination, file), options, false, symlinks)));\n        } else if (sourceStat.isSymbolicLink()) {\n          symlinks.push({\n            source,\n            destination\n          });\n        } else {\n          yield fs.copyFile(source, destination);\n        }\n      } else {\n        throw error;\n      }\n    }\n    if (root) {\n      yield Promise.all(symlinks.map( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* ({\n          source: symSource,\n          destination: symDestination\n        }) {\n          let target = yield fs.readlink(symSource);\n          // junction symlinks in windows will be absolute paths, so we need to\n          // make sure they point to the symlink destination\n          if (isAbsolute(target)) {\n            target = resolve(symDestination, relative(symSource, target));\n          }\n          // try to determine what the actual file is so we can create the correct\n          // type of symlink in windows\n          let targetStat = 'file';\n          try {\n            targetStat = yield fs.stat(resolve(dirname(symSource), target));\n            if (targetStat.isDirectory()) {\n              targetStat = 'junction';\n            }\n          } catch {\n            // targetStat remains 'file'\n          }\n          yield fs.symlink(target, symDestination, targetStat);\n        });\n        return function (_x4) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n      yield fs.rm(source, {\n        recursive: true,\n        force: true\n      });\n    }\n  });\n  return function moveFile(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = moveFile;","map":{"version":3,"names":["dirname","join","resolve","relative","isAbsolute","require","fs","pathExists","path","access","er","code","moveFile","source","destination","options","root","symlinks","TypeError","overwrite","Error","mkdir","recursive","rename","error","sourceStat","lstat","isDirectory","files","readdir","Promise","all","map","file","isSymbolicLink","push","copyFile","symSource","symDestination","target","readlink","targetStat","stat","symlink","rm","force","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/@npmcli/fs/lib/move-file.js"],"sourcesContent":["const { dirname, join, resolve, relative, isAbsolute } = require('path')\nconst fs = require('fs/promises')\n\nconst pathExists = async path => {\n  try {\n    await fs.access(path)\n    return true\n  } catch (er) {\n    return er.code !== 'ENOENT'\n  }\n}\n\nconst moveFile = async (source, destination, options = {}, root = true, symlinks = []) => {\n  if (!source || !destination) {\n    throw new TypeError('`source` and `destination` file required')\n  }\n\n  options = {\n    overwrite: true,\n    ...options,\n  }\n\n  if (!options.overwrite && await pathExists(destination)) {\n    throw new Error(`The destination file exists: ${destination}`)\n  }\n\n  await fs.mkdir(dirname(destination), { recursive: true })\n\n  try {\n    await fs.rename(source, destination)\n  } catch (error) {\n    if (error.code === 'EXDEV' || error.code === 'EPERM') {\n      const sourceStat = await fs.lstat(source)\n      if (sourceStat.isDirectory()) {\n        const files = await fs.readdir(source)\n        await Promise.all(files.map((file) =>\n          moveFile(join(source, file), join(destination, file), options, false, symlinks)\n        ))\n      } else if (sourceStat.isSymbolicLink()) {\n        symlinks.push({ source, destination })\n      } else {\n        await fs.copyFile(source, destination)\n      }\n    } else {\n      throw error\n    }\n  }\n\n  if (root) {\n    await Promise.all(symlinks.map(async ({ source: symSource, destination: symDestination }) => {\n      let target = await fs.readlink(symSource)\n      // junction symlinks in windows will be absolute paths, so we need to\n      // make sure they point to the symlink destination\n      if (isAbsolute(target)) {\n        target = resolve(symDestination, relative(symSource, target))\n      }\n      // try to determine what the actual file is so we can create the correct\n      // type of symlink in windows\n      let targetStat = 'file'\n      try {\n        targetStat = await fs.stat(resolve(dirname(symSource), target))\n        if (targetStat.isDirectory()) {\n          targetStat = 'junction'\n        }\n      } catch {\n        // targetStat remains 'file'\n      }\n      await fs.symlink(\n        target,\n        symDestination,\n        targetStat\n      )\n    }))\n    await fs.rm(source, { recursive: true, force: true })\n  }\n}\n\nmodule.exports = moveFile\n"],"mappings":";AAAA,MAAM;EAAEA,OAAO;EAAEC,IAAI;EAAEC,OAAO;EAAEC,QAAQ;EAAEC;AAAW,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACxE,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEjC,MAAME,UAAU;EAAA,6BAAG,WAAMC,IAAI,EAAI;IAC/B,IAAI;MACF,MAAMF,EAAE,CAACG,MAAM,CAACD,IAAI,CAAC;MACrB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOE,EAAE,EAAE;MACX,OAAOA,EAAE,CAACC,IAAI,KAAK,QAAQ;IAC7B;EACF,CAAC;EAAA,gBAPKJ,UAAU;IAAA;EAAA;AAAA,GAOf;AAED,MAAMK,QAAQ;EAAA,8BAAG,WAAOC,MAAM,EAAEC,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,IAAI,GAAG,IAAI,EAAEC,QAAQ,GAAG,EAAE,EAAK;IACxF,IAAI,CAACJ,MAAM,IAAI,CAACC,WAAW,EAAE;MAC3B,MAAM,IAAII,SAAS,CAAC,0CAA0C,CAAC;IACjE;IAEAH,OAAO,GAAG;MACRI,SAAS,EAAE,IAAI;MACf,GAAGJ;IACL,CAAC;IAED,IAAI,CAACA,OAAO,CAACI,SAAS,WAAUZ,UAAU,CAACO,WAAW,CAAC,GAAE;MACvD,MAAM,IAAIM,KAAK,CAAE,gCAA+BN,WAAY,EAAC,CAAC;IAChE;IAEA,MAAMR,EAAE,CAACe,KAAK,CAACrB,OAAO,CAACc,WAAW,CAAC,EAAE;MAAEQ,SAAS,EAAE;IAAK,CAAC,CAAC;IAEzD,IAAI;MACF,MAAMhB,EAAE,CAACiB,MAAM,CAACV,MAAM,EAAEC,WAAW,CAAC;IACtC,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd,IAAIA,KAAK,CAACb,IAAI,KAAK,OAAO,IAAIa,KAAK,CAACb,IAAI,KAAK,OAAO,EAAE;QACpD,MAAMc,UAAU,SAASnB,EAAE,CAACoB,KAAK,CAACb,MAAM,CAAC;QACzC,IAAIY,UAAU,CAACE,WAAW,EAAE,EAAE;UAC5B,MAAMC,KAAK,SAAStB,EAAE,CAACuB,OAAO,CAAChB,MAAM,CAAC;UACtC,MAAMiB,OAAO,CAACC,GAAG,CAACH,KAAK,CAACI,GAAG,CAAEC,IAAI,IAC/BrB,QAAQ,CAACX,IAAI,CAACY,MAAM,EAAEoB,IAAI,CAAC,EAAEhC,IAAI,CAACa,WAAW,EAAEmB,IAAI,CAAC,EAAElB,OAAO,EAAE,KAAK,EAAEE,QAAQ,CAAC,CAChF,CAAC;QACJ,CAAC,MAAM,IAAIQ,UAAU,CAACS,cAAc,EAAE,EAAE;UACtCjB,QAAQ,CAACkB,IAAI,CAAC;YAAEtB,MAAM;YAAEC;UAAY,CAAC,CAAC;QACxC,CAAC,MAAM;UACL,MAAMR,EAAE,CAAC8B,QAAQ,CAACvB,MAAM,EAAEC,WAAW,CAAC;QACxC;MACF,CAAC,MAAM;QACL,MAAMU,KAAK;MACb;IACF;IAEA,IAAIR,IAAI,EAAE;MACR,MAAMc,OAAO,CAACC,GAAG,CAACd,QAAQ,CAACe,GAAG;QAAA,8BAAC,WAAO;UAAEnB,MAAM,EAAEwB,SAAS;UAAEvB,WAAW,EAAEwB;QAAe,CAAC,EAAK;UAC3F,IAAIC,MAAM,SAASjC,EAAE,CAACkC,QAAQ,CAACH,SAAS,CAAC;UACzC;UACA;UACA,IAAIjC,UAAU,CAACmC,MAAM,CAAC,EAAE;YACtBA,MAAM,GAAGrC,OAAO,CAACoC,cAAc,EAAEnC,QAAQ,CAACkC,SAAS,EAAEE,MAAM,CAAC,CAAC;UAC/D;UACA;UACA;UACA,IAAIE,UAAU,GAAG,MAAM;UACvB,IAAI;YACFA,UAAU,SAASnC,EAAE,CAACoC,IAAI,CAACxC,OAAO,CAACF,OAAO,CAACqC,SAAS,CAAC,EAAEE,MAAM,CAAC,CAAC;YAC/D,IAAIE,UAAU,CAACd,WAAW,EAAE,EAAE;cAC5Bc,UAAU,GAAG,UAAU;YACzB;UACF,CAAC,CAAC,MAAM;YACN;UAAA;UAEF,MAAMnC,EAAE,CAACqC,OAAO,CACdJ,MAAM,EACND,cAAc,EACdG,UAAU,CACX;QACH,CAAC;QAAA;UAAA;QAAA;MAAA,IAAC,CAAC;MACH,MAAMnC,EAAE,CAACsC,EAAE,CAAC/B,MAAM,EAAE;QAAES,SAAS,EAAE,IAAI;QAAEuB,KAAK,EAAE;MAAK,CAAC,CAAC;IACvD;EACF,CAAC;EAAA,gBA/DKjC,QAAQ;IAAA;EAAA;AAAA,GA+Db;AAEDkC,MAAM,CAACC,OAAO,GAAGnC,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}