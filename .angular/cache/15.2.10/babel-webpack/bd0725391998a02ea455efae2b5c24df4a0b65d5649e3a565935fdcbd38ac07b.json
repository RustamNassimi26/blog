{"ast":null,"code":"import { Subject, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.error$ = new Subject();\n  }\n  get token() {\n    const expDate = new Date(localStorage.getItem('fb-token-exp'));\n    if (new Date() > expDate) {\n      this.logout();\n      return null;\n    }\n    return localStorage.getItem('fb-token');\n  }\n  login(user) {\n    user.returnSecureToken = true;\n    console.log(user, 'user');\n    return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, user).pipe(tap(this.setToken), catchError(this.handleError.bind(this)));\n  }\n  register(user) {\n    return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=#{environment.apiKey}`, user);\n  }\n  logout() {\n    this.setToken(null);\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  handleError(error) {\n    const {\n      message\n    } = error.error.error;\n    switch (message) {\n      case 'INVALID_EMAIL':\n        this.error$.next('Неверный email');\n        break;\n      case 'INVALID_PASSWORD':\n        this.error$.next('Неверный password');\n        break;\n      case 'EMAIL_NOT_FOUND':\n        this.error$.next('Email не найден');\n        break;\n    }\n    return throwError(error);\n  }\n  setToken(response) {\n    if (response) {\n      const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000);\n      localStorage.setItem('fb-token', response.idToken);\n      localStorage.setItem('fb-token-exp', expDate.toString());\n    } else {\n      localStorage.clear();\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAAoBA,OAAO,EAAEC,UAAU,QAAO,MAAM;AACpD,SAAQC,WAAW,QAAO,sCAAsC;AAChE,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;;;AAG9C,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFjB,WAAM,GAAoB,IAAIP,OAAO,EAAU;EAEf;EAEvC,IAAIQ,KAAK;IACP,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAW,CAAC;IACxE,IAAI,IAAIF,IAAI,EAAE,GAAGD,OAAO,EAAE;MACxB,IAAI,CAACI,MAAM,EAAE;MACb,OAAO,IAAI;;IAEb,OAAOF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAE,KAAK,CAACC,IAAU;IACdA,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7BC,OAAO,CAACC,GAAG,CAACH,IAAI,EAAE,MAAM,CAAC;IACzB,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CAAiB,6EAA6EjB,WAAW,CAACkB,MAAM,EAAE,EAAEL,IAAI,CAAC,CAC3IM,IAAI,CACHjB,GAAG,CAAC,IAAI,CAACkB,QAAQ,CAAC,EAClBnB,UAAU,CAAC,IAAI,CAACoB,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACxC;EACL;EAEAC,QAAQ,CAACV,IAAU;IACjB,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CAAiB,qFAAqF,EAAEJ,IAAI,CAAC;EACpI;EAEAF,MAAM;IACJ,IAAI,CAACS,QAAQ,CAAC,IAAI,CAAC;EACrB;EAEAI,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAAClB,KAAK;EACrB;EAEQe,WAAW,CAACI,KAAwB;IAC1C,MAAM;MAACC;IAAO,CAAC,GAAGD,KAAK,CAACA,KAAK,CAACA,KAAK;IACnC,QAAOC,OAAO;MACZ,KAAK,eAAe;QAClB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,gBAAgB,CAAC;QACpC;MACA,KAAK,kBAAkB;QACrB,IAAI,CAACD,MAAM,CAACC,IAAI,CAAC,mBAAmB,CAAC;QACvC;MACA,KAAK,iBAAiB;QACpB,IAAI,CAACD,MAAM,CAACC,IAAI,CAAC,iBAAiB,CAAC;QACrC;IAAK;IAEP,OAAO7B,UAAU,CAAC0B,KAAK,CAAC;EAC1B;EAEQL,QAAQ,CAACS,QAA+B;IAC9C,IAAIA,QAAQ,EAAE;MACZ,MAAMtB,OAAO,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACsB,OAAO,EAAE,GAAG,CAACD,QAAQ,CAACE,SAAS,GAAG,IAAI,CAAC;MAC3EtB,YAAY,CAACuB,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAACI,OAAO,CAAC;MAClDxB,YAAY,CAACuB,OAAO,CAAC,cAAc,EAAEzB,OAAO,CAAC2B,QAAQ,EAAE,CAAC;KACzD,MAAM;MACLzB,YAAY,CAAC0B,KAAK,EAAE;;EAExB;EAAC;qBA7DUhC,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAiC,SAAXjC,WAAW;IAAAkC,YADE;EAAM","names":["Subject","throwError","environment","catchError","tap","AuthService","constructor","http","token","expDate","Date","localStorage","getItem","logout","login","user","returnSecureToken","console","log","post","apiKey","pipe","setToken","handleError","bind","register","isAuthenticated","error","message","error$","next","response","getTime","expiresIn","setItem","idToken","toString","clear","factory","providedIn"],"sourceRoot":"","sources":["I:\\Angular\\angular-blog\\src\\app\\admin\\shared\\services\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {FbAuthResponse, User} from '../../../shared/interfaces';\r\nimport {Observable, Subject, throwError} from 'rxjs';\r\nimport {environment} from '../../../../environments/environment';\r\nimport {catchError, tap} from 'rxjs/operators';\r\n\r\n@Injectable({ providedIn: 'root'})\r\nexport class AuthService {\r\n\r\n  public error$: Subject<string> = new Subject<string>()\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get token(): string | null {\r\n    const expDate = new Date(localStorage.getItem('fb-token-exp') as string)\r\n    if (new Date() > expDate) {\r\n      this.logout()\r\n      return null\r\n    }\r\n    return localStorage.getItem('fb-token')\r\n  }\r\n\r\n  login(user: User): Observable<any> {\r\n    user.returnSecureToken = true\r\n    console.log(user, 'user')\r\n    return this.http.post<FbAuthResponse>(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, user)\r\n      .pipe(\r\n        tap(this.setToken),\r\n        catchError(this.handleError.bind(this))\r\n      )\r\n  }\r\n\r\n  register(user: User): Observable<any> {\r\n    return this.http.post<FbAuthResponse>(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=#{environment.apiKey}`, user)\r\n  }\r\n\r\n  logout() {\r\n    this.setToken(null)\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.token\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    const {message} = error.error.error;\r\n    switch(message) {\r\n      case 'INVALID_EMAIL':\r\n        this.error$.next('Неверный email')\r\n      break\r\n      case 'INVALID_PASSWORD':\r\n        this.error$.next('Неверный password')\r\n      break\r\n      case 'EMAIL_NOT_FOUND':\r\n        this.error$.next('Email не найден')\r\n      break\r\n    }\r\n    return throwError(error) \r\n  }\r\n\r\n  private setToken(response: FbAuthResponse | null) {\r\n    if (response) {\r\n      const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000)\r\n      localStorage.setItem('fb-token', response.idToken)\r\n      localStorage.setItem('fb-token-exp', expDate.toString())\r\n    } else {\r\n      localStorage.clear()\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}