{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"I:/Angular/angular-blog/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CacheInfoCommandModule = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nconst command_module_1 = require(\"../../../command-builder/command-module\");\nconst environment_options_1 = require(\"../../../utilities/environment-options\");\nconst utilities_1 = require(\"../utilities\");\nclass CacheInfoCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'info';\n    this.describe = 'Prints persistent disk cache configuration and statistics in the console.';\n    this.scope = command_module_1.CommandScope.In;\n  }\n  builder(localYargs) {\n    return localYargs.strict();\n  }\n  run() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        path,\n        environment,\n        enabled\n      } = (0, utilities_1.getCacheConfig)(_this.context.workspace);\n      _this.context.logger.info(core_1.tags.stripIndents`\n      Enabled: ${enabled ? 'yes' : 'no'}\n      Environment: ${environment}\n      Path: ${path}\n      Size on disk: ${yield _this.getSizeOfDirectory(path)}\n      Effective status on current machine: ${_this.effectiveEnabledStatus() ? 'enabled' : 'disabled'}\n    `);\n    })();\n  }\n  getSizeOfDirectory(path) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const directoriesStack = [path];\n      let size = 0;\n      while (directoriesStack.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const dirPath = directoriesStack.pop();\n        let entries = [];\n        try {\n          entries = yield fs_1.promises.readdir(dirPath);\n        } catch {}\n        for (const entry of entries) {\n          const entryPath = (0, path_1.join)(dirPath, entry);\n          const stats = yield fs_1.promises.stat(entryPath);\n          if (stats.isDirectory()) {\n            directoriesStack.push(entryPath);\n          }\n          size += stats.size;\n        }\n      }\n      return _this2.formatSize(size);\n    })();\n  }\n  formatSize(size) {\n    if (size <= 0) {\n      return '0 bytes';\n    }\n    const abbreviations = ['bytes', 'kB', 'MB', 'GB'];\n    const index = Math.floor(Math.log(size) / Math.log(1024));\n    const roundedSize = size / Math.pow(1024, index);\n    // bytes don't have a fraction\n    const fractionDigits = index === 0 ? 0 : 2;\n    return `${roundedSize.toFixed(fractionDigits)} ${abbreviations[index]}`;\n  }\n  effectiveEnabledStatus() {\n    const {\n      enabled,\n      environment\n    } = (0, utilities_1.getCacheConfig)(this.context.workspace);\n    if (enabled) {\n      switch (environment) {\n        case 'ci':\n          return environment_options_1.isCI;\n        case 'local':\n          return !environment_options_1.isCI;\n      }\n    }\n    return enabled;\n  }\n}\nexports.CacheInfoCommandModule = CacheInfoCommandModule;","map":{"version":3,"names":["Object","defineProperty","exports","value","CacheInfoCommandModule","core_1","require","fs_1","path_1","command_module_1","environment_options_1","utilities_1","CommandModule","constructor","arguments","command","describe","scope","CommandScope","In","builder","localYargs","strict","run","path","environment","enabled","getCacheConfig","context","workspace","logger","info","tags","stripIndents","getSizeOfDirectory","effectiveEnabledStatus","directoriesStack","size","length","dirPath","pop","entries","promises","readdir","entry","entryPath","join","stats","stat","isDirectory","push","formatSize","abbreviations","index","Math","floor","log","roundedSize","pow","fractionDigits","toFixed","isCI"],"sources":["I:/Angular/angular-blog/node_modules/@angular/cli/src/commands/cache/info/cli.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CacheInfoCommandModule = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nconst command_module_1 = require(\"../../../command-builder/command-module\");\nconst environment_options_1 = require(\"../../../utilities/environment-options\");\nconst utilities_1 = require(\"../utilities\");\nclass CacheInfoCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.command = 'info';\n        this.describe = 'Prints persistent disk cache configuration and statistics in the console.';\n        this.scope = command_module_1.CommandScope.In;\n    }\n    builder(localYargs) {\n        return localYargs.strict();\n    }\n    async run() {\n        const { path, environment, enabled } = (0, utilities_1.getCacheConfig)(this.context.workspace);\n        this.context.logger.info(core_1.tags.stripIndents `\n      Enabled: ${enabled ? 'yes' : 'no'}\n      Environment: ${environment}\n      Path: ${path}\n      Size on disk: ${await this.getSizeOfDirectory(path)}\n      Effective status on current machine: ${this.effectiveEnabledStatus() ? 'enabled' : 'disabled'}\n    `);\n    }\n    async getSizeOfDirectory(path) {\n        const directoriesStack = [path];\n        let size = 0;\n        while (directoriesStack.length) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const dirPath = directoriesStack.pop();\n            let entries = [];\n            try {\n                entries = await fs_1.promises.readdir(dirPath);\n            }\n            catch { }\n            for (const entry of entries) {\n                const entryPath = (0, path_1.join)(dirPath, entry);\n                const stats = await fs_1.promises.stat(entryPath);\n                if (stats.isDirectory()) {\n                    directoriesStack.push(entryPath);\n                }\n                size += stats.size;\n            }\n        }\n        return this.formatSize(size);\n    }\n    formatSize(size) {\n        if (size <= 0) {\n            return '0 bytes';\n        }\n        const abbreviations = ['bytes', 'kB', 'MB', 'GB'];\n        const index = Math.floor(Math.log(size) / Math.log(1024));\n        const roundedSize = size / Math.pow(1024, index);\n        // bytes don't have a fraction\n        const fractionDigits = index === 0 ? 0 : 2;\n        return `${roundedSize.toFixed(fractionDigits)} ${abbreviations[index]}`;\n    }\n    effectiveEnabledStatus() {\n        const { enabled, environment } = (0, utilities_1.getCacheConfig)(this.context.workspace);\n        if (enabled) {\n            switch (environment) {\n                case 'ci':\n                    return environment_options_1.isCI;\n                case 'local':\n                    return !environment_options_1.isCI;\n            }\n        }\n        return enabled;\n    }\n}\nexports.CacheInfoCommandModule = CacheInfoCommandModule;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAG,KAAK,CAAC;AACvC,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9C,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAI,CAAC;AAC1B,MAAME,MAAM,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,yCAAyC,CAAC;AAC3E,MAAMI,qBAAqB,GAAGJ,OAAO,CAAC,wCAAwC,CAAC;AAC/E,MAAMK,WAAW,GAAGL,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAMF,sBAAsB,SAASK,gBAAgB,CAACG,aAAa,CAAC;EAChEC,WAAW,GAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,OAAO,GAAG,MAAM;IACrB,IAAI,CAACC,QAAQ,GAAG,2EAA2E;IAC3F,IAAI,CAACC,KAAK,GAAGR,gBAAgB,CAACS,YAAY,CAACC,EAAE;EACjD;EACAC,OAAO,CAACC,UAAU,EAAE;IAChB,OAAOA,UAAU,CAACC,MAAM,EAAE;EAC9B;EACMC,GAAG,GAAG;IAAA;IAAA;MACR,MAAM;QAAEC,IAAI;QAAEC,WAAW;QAAEC;MAAQ,CAAC,GAAG,CAAC,CAAC,EAAEf,WAAW,CAACgB,cAAc,EAAE,KAAI,CAACC,OAAO,CAACC,SAAS,CAAC;MAC9F,KAAI,CAACD,OAAO,CAACE,MAAM,CAACC,IAAI,CAAC1B,MAAM,CAAC2B,IAAI,CAACC,YAAc;AAC3D,iBAAiBP,OAAO,GAAG,KAAK,GAAG,IAAK;AACxC,qBAAqBD,WAAY;AACjC,cAAcD,IAAK;AACnB,sBAAoB,MAAQ,KAAI,CAACU,kBAAkB,CAACV,IAAI,CAAE;AAC1D,6CAA6C,KAAI,CAACW,sBAAsB,EAAE,GAAG,SAAS,GAAG,UAAW;AACpG,KAAK,CAAC;IAAC;EACH;EACMD,kBAAkB,CAACV,IAAI,EAAE;IAAA;IAAA;MAC3B,MAAMY,gBAAgB,GAAG,CAACZ,IAAI,CAAC;MAC/B,IAAIa,IAAI,GAAG,CAAC;MACZ,OAAOD,gBAAgB,CAACE,MAAM,EAAE;QAC5B;QACA,MAAMC,OAAO,GAAGH,gBAAgB,CAACI,GAAG,EAAE;QACtC,IAAIC,OAAO,GAAG,EAAE;QAChB,IAAI;UACAA,OAAO,SAASlC,IAAI,CAACmC,QAAQ,CAACC,OAAO,CAACJ,OAAO,CAAC;QAClD,CAAC,CACD,MAAM,CAAE;QACR,KAAK,MAAMK,KAAK,IAAIH,OAAO,EAAE;UACzB,MAAMI,SAAS,GAAG,CAAC,CAAC,EAAErC,MAAM,CAACsC,IAAI,EAAEP,OAAO,EAAEK,KAAK,CAAC;UAClD,MAAMG,KAAK,SAASxC,IAAI,CAACmC,QAAQ,CAACM,IAAI,CAACH,SAAS,CAAC;UACjD,IAAIE,KAAK,CAACE,WAAW,EAAE,EAAE;YACrBb,gBAAgB,CAACc,IAAI,CAACL,SAAS,CAAC;UACpC;UACAR,IAAI,IAAIU,KAAK,CAACV,IAAI;QACtB;MACJ;MACA,OAAO,MAAI,CAACc,UAAU,CAACd,IAAI,CAAC;IAAC;EACjC;EACAc,UAAU,CAACd,IAAI,EAAE;IACb,IAAIA,IAAI,IAAI,CAAC,EAAE;MACX,OAAO,SAAS;IACpB;IACA,MAAMe,aAAa,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACjD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACnB,IAAI,CAAC,GAAGiB,IAAI,CAACE,GAAG,CAAC,IAAI,CAAC,CAAC;IACzD,MAAMC,WAAW,GAAGpB,IAAI,GAAGiB,IAAI,CAACI,GAAG,CAAC,IAAI,EAAEL,KAAK,CAAC;IAChD;IACA,MAAMM,cAAc,GAAGN,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;IAC1C,OAAQ,GAAEI,WAAW,CAACG,OAAO,CAACD,cAAc,CAAE,IAAGP,aAAa,CAACC,KAAK,CAAE,EAAC;EAC3E;EACAlB,sBAAsB,GAAG;IACrB,MAAM;MAAET,OAAO;MAAED;IAAY,CAAC,GAAG,CAAC,CAAC,EAAEd,WAAW,CAACgB,cAAc,EAAE,IAAI,CAACC,OAAO,CAACC,SAAS,CAAC;IACxF,IAAIH,OAAO,EAAE;MACT,QAAQD,WAAW;QACf,KAAK,IAAI;UACL,OAAOf,qBAAqB,CAACmD,IAAI;QACrC,KAAK,OAAO;UACR,OAAO,CAACnD,qBAAqB,CAACmD,IAAI;MAAC;IAE/C;IACA,OAAOnC,OAAO;EAClB;AACJ;AACAxB,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}