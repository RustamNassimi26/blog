{"ast":null,"code":"/* eslint-disable max-len */\n\n'use strict';\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : '';\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\nconst formatHashFragment = f => f.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\nconst defaults = {\n  sshtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath,\n    path\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'HEAD'), '/', path)}`,\n  browsetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsetreetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  browseblobtemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    blobpath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${blobpath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish || 'HEAD')}/${path}`,\n  shortcuttemplate: ({\n    type,\n    user,\n    project,\n    committish\n  }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    user,\n    project,\n    committish\n  }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n};\nconst hosts = {};\nhosts.github = {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  blobpath: 'blob',\n  editpath: 'edit',\n  filetemplate: ({\n    auth,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish || 'HEAD')}/${path}`,\n  gittemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n    if (type && type !== 'tree') {\n      return;\n    }\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n};\nhosts.bitbucket = {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  blobpath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'HEAD'), '/', path, editpath)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish || 'HEAD')}.tar.gz`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (['get'].includes(aux)) {\n      return;\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n};\nhosts.gitlab = {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  blobpath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish || 'HEAD')}`,\n  extract: url => {\n    const path = url.pathname.slice(1);\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n    const segments = path.split('/');\n    let project = segments.pop();\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    const user = segments.join('/');\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n};\nhosts.gist = {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsetreetemplate: ({\n    domain,\n    project,\n    committish,\n    path,\n    hashformat\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  browseblobtemplate: ({\n    domain,\n    project,\n    committish,\n    path,\n    hashformat\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    user,\n    project,\n    committish,\n    path\n  }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({\n    type,\n    project,\n    committish\n  }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    project,\n    committish\n  }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    project\n  }) => `https://${domain}/${project}`,\n  gittemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    project,\n    committish\n  }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n    if (aux === 'raw') {\n      return;\n    }\n    if (!project) {\n      if (!user) {\n        return;\n      }\n      project = user;\n      user = null;\n    }\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n};\nhosts.sourcehut = {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  blobpath: 'tree',\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'HEAD'}/${path}`,\n  httpstemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'HEAD'}.tar.gz`,\n  bugstemplate: ({\n    user,\n    project\n  }) => `https://todo.sr.ht/${user}/${project}`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return;\n    }\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n    if (!user || !project) {\n      return;\n    }\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n};\nfor (const [name, host] of Object.entries(hosts)) {\n  hosts[name] = Object.assign({}, defaults, host);\n}\nmodule.exports = hosts;","map":{"version":3,"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","formatHashFragment","f","toLowerCase","replace","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","edittemplate","editpath","path","browsetemplate","treepath","browsetreetemplate","fragment","hashformat","browseblobtemplate","blobpath","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","hosts","github","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","sourcehut","name","host","Object","entries","assign","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/npm-pick-manifest/node_modules/hosted-git-info/lib/hosts.js"],"sourcesContent":["/* eslint-disable max-len */\n\n'use strict'\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\nconst formatHashFragment = (f) => f.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) =>\n    `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) =>\n    `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath, path }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'HEAD'), '/', path)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsetreetemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) =>\n    `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  browseblobtemplate: ({ domain, user, project, committish, blobpath, path, fragment, hashformat }) =>\n    `https://${domain}/${user}/${project}/${blobpath}/${maybeEncode(committish || 'HEAD')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) =>\n    `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) =>\n    `https://${domain}/${user}/${project}/raw/${maybeEncode(committish || 'HEAD')}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) =>\n    `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) =>\n    `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) =>\n    `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment,\n}\n\nconst hosts = {}\nhosts.github = {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  blobpath: 'blob',\n  editpath: 'edit',\n  filetemplate: ({ auth, user, project, committish, path }) =>\n    `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish || 'HEAD')}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) =>\n    `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  },\n}\n\nhosts.bitbucket = {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  blobpath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({ domain, user, project, committish, treepath, path, editpath }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'HEAD'), '/', path, editpath)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}/get/${maybeEncode(committish || 'HEAD')}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n}\n\nhosts.gitlab = {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  blobpath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({ auth, domain, user, project, committish }) =>\n    `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish || 'HEAD')}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n}\n\nhosts.gist = {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({ domain, project, committish }) =>\n    `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) =>\n    `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath }) =>\n    `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({ domain, project, committish }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsetreetemplate: ({ domain, project, committish, path, hashformat }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  browseblobtemplate: ({ domain, project, committish, path, hashformat }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) =>\n    `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) =>\n    `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) =>\n    `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) =>\n    `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) =>\n    `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) =>\n    `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) =>\n    `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) =>\n    `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish || 'HEAD')}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  },\n}\n\nhosts.sourcehut = {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  blobpath: 'tree',\n  filetemplate: ({ domain, user, project, committish, path }) =>\n    `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'HEAD'}/${path}`,\n  httpstemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) =>\n    `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'HEAD'}.tar.gz`,\n  bugstemplate: ({ user, project }) =>\n    `https://todo.sr.ht/${user}/${project}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n}\n\nfor (const [name, host] of Object.entries(hosts)) {\n  hosts[name] = Object.assign({}, defaults, host)\n}\n\nmodule.exports = hosts\n"],"mappings":"AAAA;;AAEA,YAAY;;AAEZ,MAAMA,SAAS,GAAG,CAAC,GAAGC,IAAI,KAAKA,IAAI,CAACC,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC,GAAGF,IAAI,CAACG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE;AAC1E,MAAMC,WAAW,GAAIF,GAAG,IAAKA,GAAG,GAAGG,kBAAkB,CAACH,GAAG,CAAC,GAAG,EAAE;AAC/D,MAAMI,kBAAkB,GAAIC,CAAC,IAAKA,CAAC,CAACC,WAAW,EAAE,CAACC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;AAEnG,MAAMC,QAAQ,GAAG;EACfC,WAAW,EAAE,CAAC;IAAEC,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KAChD,OAAMH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACrEC,cAAc,EAAE,CAAC;IAAEJ,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACnD,iBAAgBH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EAC/EE,YAAY,EAAE,CAAC;IAAEL,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEG,QAAQ;IAAEC;EAAK,CAAC,KACjE,WAAUP,MAAO,IAAGC,IAAK,IAAGC,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEmB,QAAQ,EAAE,GAAG,EAAEd,WAAW,CAACW,UAAU,IAAI,MAAM,CAAC,EAAE,GAAG,EAAEI,IAAI,CAAE,EAAC;EACtHC,cAAc,EAAE,CAAC;IAAER,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEM;EAAS,CAAC,KAC7D,WAAUT,MAAO,IAAGC,IAAK,IAAGC,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEsB,QAAQ,EAAE,GAAG,EAAEjB,WAAW,CAACW,UAAU,CAAC,CAAE,EAAC;EACjGO,kBAAkB,EAAE,CAAC;IAAEV,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEM,QAAQ;IAAEF,IAAI;IAAEI,QAAQ;IAAEC;EAAW,CAAC,KAC7F,WAAUZ,MAAO,IAAGC,IAAK,IAAGC,OAAQ,IAAGO,QAAS,IAAGjB,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,IAAGI,IAAK,GAAEpB,SAAS,CAAC,GAAG,EAAEyB,UAAU,CAACD,QAAQ,IAAI,EAAE,CAAC,CAAE,EAAC;EAC9IE,kBAAkB,EAAE,CAAC;IAAEb,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEW,QAAQ;IAAEP,IAAI;IAAEI,QAAQ;IAAEC;EAAW,CAAC,KAC7F,WAAUZ,MAAO,IAAGC,IAAK,IAAGC,OAAQ,IAAGY,QAAS,IAAGtB,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,IAAGI,IAAK,GAAEpB,SAAS,CAAC,GAAG,EAAEyB,UAAU,CAACD,QAAQ,IAAI,EAAE,CAAC,CAAE,EAAC;EAC9II,YAAY,EAAE,CAAC;IAAEf,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEO,QAAQ;IAAEN;EAAW,CAAC,KAC3D,WAAUH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEsB,QAAQ,EAAE,GAAG,EAAEjB,WAAW,CAACW,UAAU,CAAC,CAAE,SAAQ;EACxGa,aAAa,EAAE,CAAC;IAAEC,IAAI;IAAEjB,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACxD,eAAchB,SAAS,CAAC8B,IAAI,EAAE,GAAG,CAAE,GAAEjB,MAAO,IAAGC,IAAK,IAAGC,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACpGe,YAAY,EAAE,CAAC;IAAElB,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEI;EAAK,CAAC,KACvD,WAAUP,MAAO,IAAGC,IAAK,IAAGC,OAAQ,QAAOV,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,IAAGI,IAAK,EAAC;EACzFY,gBAAgB,EAAE,CAAC;IAAEC,IAAI;IAAEnB,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACnD,GAAEiB,IAAK,IAAGnB,IAAK,IAAGC,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EAC3DkB,YAAY,EAAE,CAAC;IAAEpB,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACzC,GAAEF,IAAK,IAAGC,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACnDmB,YAAY,EAAE,CAAC;IAAEtB,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,KACrC,WAAUF,MAAO,IAAGC,IAAK,IAAGC,OAAQ,SAAQ;EAC/CU,UAAU,EAAElB;AACd,CAAC;AAED,MAAM6B,KAAK,GAAG,CAAC,CAAC;AAChBA,KAAK,CAACC,MAAM,GAAG;EACb;EACA;EACAC,SAAS,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC;EACxEzB,MAAM,EAAE,YAAY;EACpBS,QAAQ,EAAE,MAAM;EAChBK,QAAQ,EAAE,MAAM;EAChBR,QAAQ,EAAE,MAAM;EAChBY,YAAY,EAAE,CAAC;IAAED,IAAI;IAAEhB,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEI;EAAK,CAAC,KACrD,WAAUpB,SAAS,CAAC8B,IAAI,EAAE,GAAG,CAAE,6BAA4BhB,IAAK,IAAGC,OAAQ,IAAGV,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,IAAGI,IAAK,EAAC;EAC5HmB,WAAW,EAAE,CAAC;IAAET,IAAI;IAAEjB,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACtD,SAAQhB,SAAS,CAAC8B,IAAI,EAAE,GAAG,CAAE,GAAEjB,MAAO,IAAGC,IAAK,IAAGC,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EAC9FwB,eAAe,EAAE,CAAC;IAAE3B,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACpD,oBAAmBH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,WAAUV,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,EAAC;EAC7FyB,OAAO,EAAGC,GAAG,IAAK;IAChB,IAAI,GAAG5B,IAAI,EAAEC,OAAO,EAAEkB,IAAI,EAAEjB,UAAU,CAAC,GAAG0B,GAAG,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACpE,IAAIX,IAAI,IAAIA,IAAI,KAAK,MAAM,EAAE;MAC3B;IACF;IAEA,IAAI,CAACA,IAAI,EAAE;MACTjB,UAAU,GAAG0B,GAAG,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;IAChC;IAEA,IAAI/B,OAAO,IAAIA,OAAO,CAACgC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACvChC,OAAO,GAAGA,OAAO,CAAC+B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC;IAEA,IAAI,CAAChC,IAAI,IAAI,CAACC,OAAO,EAAE;MACrB;IACF;IAEA,OAAO;MAAED,IAAI;MAAEC,OAAO;MAAEC;IAAW,CAAC;EACtC;AACF,CAAC;AAEDoB,KAAK,CAACY,SAAS,GAAG;EAChBV,SAAS,EAAE,CAAC,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC;EACvDzB,MAAM,EAAE,eAAe;EACvBS,QAAQ,EAAE,KAAK;EACfK,QAAQ,EAAE,KAAK;EACfR,QAAQ,EAAE,YAAY;EACtBD,YAAY,EAAE,CAAC;IAAEL,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEM,QAAQ;IAAEF,IAAI;IAAED;EAAS,CAAC,KAC3E,WAAUN,MAAO,IAAGC,IAAK,IAAGC,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEsB,QAAQ,EAAE,GAAG,EAAEjB,WAAW,CAACW,UAAU,IAAI,MAAM,CAAC,EAAE,GAAG,EAAEI,IAAI,EAAED,QAAQ,CAAE,EAAC;EAChIqB,eAAe,EAAE,CAAC;IAAE3B,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACpD,WAAUH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,QAAOV,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,SAAQ;EACxFyB,OAAO,EAAGC,GAAG,IAAK;IAChB,IAAI,GAAG5B,IAAI,EAAEC,OAAO,EAAEkC,GAAG,CAAC,GAAGP,GAAG,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACvD,IAAI,CAAC,KAAK,CAAC,CAACM,QAAQ,CAACD,GAAG,CAAC,EAAE;MACzB;IACF;IAEA,IAAIlC,OAAO,IAAIA,OAAO,CAACgC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACvChC,OAAO,GAAGA,OAAO,CAAC+B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC;IAEA,IAAI,CAAChC,IAAI,IAAI,CAACC,OAAO,EAAE;MACrB;IACF;IAEA,OAAO;MAAED,IAAI;MAAEC,OAAO;MAAEC,UAAU,EAAE0B,GAAG,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC;IAAE,CAAC;EACzD;AACF,CAAC;AAEDV,KAAK,CAACe,MAAM,GAAG;EACbb,SAAS,EAAE,CAAC,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC;EACvDzB,MAAM,EAAE,YAAY;EACpBS,QAAQ,EAAE,MAAM;EAChBK,QAAQ,EAAE,MAAM;EAChBR,QAAQ,EAAE,QAAQ;EAClBU,aAAa,EAAE,CAAC;IAAEC,IAAI;IAAEjB,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACxD,eAAchB,SAAS,CAAC8B,IAAI,EAAE,GAAG,CAAE,GAAEjB,MAAO,IAAGC,IAAK,IAAGC,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACpGwB,eAAe,EAAE,CAAC;IAAE3B,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACpD,WAAUH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,kCAAiCV,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,EAAC;EAC3GyB,OAAO,EAAGC,GAAG,IAAK;IAChB,MAAMtB,IAAI,GAAGsB,GAAG,CAACC,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI1B,IAAI,CAAC8B,QAAQ,CAAC,KAAK,CAAC,IAAI9B,IAAI,CAAC8B,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC5D;IACF;IAEA,MAAME,QAAQ,GAAGhC,IAAI,CAACwB,KAAK,CAAC,GAAG,CAAC;IAChC,IAAI7B,OAAO,GAAGqC,QAAQ,CAACC,GAAG,EAAE;IAC5B,IAAItC,OAAO,CAACgC,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC5BhC,OAAO,GAAGA,OAAO,CAAC+B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC;IAEA,MAAMhC,IAAI,GAAGsC,QAAQ,CAAChD,IAAI,CAAC,GAAG,CAAC;IAC/B,IAAI,CAACU,IAAI,IAAI,CAACC,OAAO,EAAE;MACrB;IACF;IAEA,OAAO;MAAED,IAAI;MAAEC,OAAO;MAAEC,UAAU,EAAE0B,GAAG,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC;IAAE,CAAC;EACzD;AACF,CAAC;AAEDV,KAAK,CAACkB,IAAI,GAAG;EACXhB,SAAS,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC;EAC/DzB,MAAM,EAAE,iBAAiB;EACzBM,QAAQ,EAAE,MAAM;EAChBP,WAAW,EAAE,CAAC;IAAEC,MAAM;IAAEE,OAAO;IAAEC;EAAW,CAAC,KAC1C,OAAMH,MAAO,IAAGE,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EAC7DC,cAAc,EAAE,CAAC;IAAEJ,MAAM;IAAEE,OAAO;IAAEC;EAAW,CAAC,KAC7C,iBAAgBH,MAAO,IAAGE,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACvEE,YAAY,EAAE,CAAC;IAAEL,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEG;EAAS,CAAC,KAC3D,WAAUN,MAAO,IAAGC,IAAK,IAAGC,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEK,WAAW,CAACW,UAAU,CAAC,CAAE,IAAGG,QAAS,EAAC;EAC9FE,cAAc,EAAE,CAAC;IAAER,MAAM;IAAEE,OAAO;IAAEC;EAAW,CAAC,KAC7C,WAAUH,MAAO,IAAGE,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEK,WAAW,CAACW,UAAU,CAAC,CAAE,EAAC;EAC1EO,kBAAkB,EAAE,CAAC;IAAEV,MAAM;IAAEE,OAAO;IAAEC,UAAU;IAAEI,IAAI;IAAEK;EAAW,CAAC,KACnE,WAAUZ,MAAO,IAAGE,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEK,WAAW,CAACW,UAAU,CAAC,CAAE,GAAEhB,SAAS,CAAC,GAAG,EAAEyB,UAAU,CAACL,IAAI,CAAC,CAAE,EAAC;EAC7GM,kBAAkB,EAAE,CAAC;IAAEb,MAAM;IAAEE,OAAO;IAAEC,UAAU;IAAEI,IAAI;IAAEK;EAAW,CAAC,KACnE,WAAUZ,MAAO,IAAGE,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEK,WAAW,CAACW,UAAU,CAAC,CAAE,GAAEhB,SAAS,CAAC,GAAG,EAAEyB,UAAU,CAACL,IAAI,CAAC,CAAE,EAAC;EAC7GQ,YAAY,EAAE,CAAC;IAAEf,MAAM;IAAEE,OAAO;IAAEC;EAAW,CAAC,KAC3C,WAAUH,MAAO,IAAGE,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEK,WAAW,CAACW,UAAU,CAAC,CAAE,EAAC;EAC1Ea,aAAa,EAAE,CAAC;IAAEhB,MAAM;IAAEE,OAAO;IAAEC;EAAW,CAAC,KAC5C,eAAcH,MAAO,IAAGE,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACrEe,YAAY,EAAE,CAAC;IAAEjB,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEI;EAAK,CAAC,KAC/C,sCAAqCN,IAAK,IAAGC,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEK,WAAW,CAACW,UAAU,CAAC,CAAE,IAAGI,IAAK,EAAC;EAC/GY,gBAAgB,EAAE,CAAC;IAAEC,IAAI;IAAElB,OAAO;IAAEC;EAAW,CAAC,KAC7C,GAAEiB,IAAK,IAAGlB,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACnDkB,YAAY,EAAE,CAAC;IAAEnB,OAAO;IAAEC;EAAW,CAAC,KACnC,GAAED,OAAQ,GAAEf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EAC3CmB,YAAY,EAAE,CAAC;IAAEtB,MAAM;IAAEE;EAAQ,CAAC,KAC/B,WAAUF,MAAO,IAAGE,OAAQ,EAAC;EAChCwB,WAAW,EAAE,CAAC;IAAE1B,MAAM;IAAEE,OAAO;IAAEC;EAAW,CAAC,KAC1C,SAAQH,MAAO,IAAGE,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EAC/DwB,eAAe,EAAE,CAAC;IAAEzB,OAAO;IAAEC;EAAW,CAAC,KACtC,oCAAmCD,OAAQ,WAAUV,WAAW,CAACW,UAAU,IAAI,MAAM,CAAE,EAAC;EAC3FyB,OAAO,EAAGC,GAAG,IAAK;IAChB,IAAI,GAAG5B,IAAI,EAAEC,OAAO,EAAEkC,GAAG,CAAC,GAAGP,GAAG,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACvD,IAAIK,GAAG,KAAK,KAAK,EAAE;MACjB;IACF;IAEA,IAAI,CAAClC,OAAO,EAAE;MACZ,IAAI,CAACD,IAAI,EAAE;QACT;MACF;MAEAC,OAAO,GAAGD,IAAI;MACdA,IAAI,GAAG,IAAI;IACb;IAEA,IAAIC,OAAO,CAACgC,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC5BhC,OAAO,GAAGA,OAAO,CAAC+B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC;IAEA,OAAO;MAAEhC,IAAI;MAAEC,OAAO;MAAEC,UAAU,EAAE0B,GAAG,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC;IAAE,CAAC;EACzD,CAAC;EACDrB,UAAU,EAAE,UAAUD,QAAQ,EAAE;IAC9B,OAAOA,QAAQ,IAAI,OAAO,GAAGjB,kBAAkB,CAACiB,QAAQ,CAAC;EAC3D;AACF,CAAC;AAEDY,KAAK,CAACmB,SAAS,GAAG;EAChBjB,SAAS,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;EACjCzB,MAAM,EAAE,WAAW;EACnBS,QAAQ,EAAE,MAAM;EAChBK,QAAQ,EAAE,MAAM;EAChBI,YAAY,EAAE,CAAC;IAAElB,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,UAAU;IAAEI;EAAK,CAAC,KACvD,WAAUP,MAAO,IAAGC,IAAK,IAAGC,OAAQ,SAAQV,WAAW,CAACW,UAAU,CAAC,IAAI,MAAO,IAAGI,IAAK,EAAC;EAC1FS,aAAa,EAAE,CAAC;IAAEhB,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KAClD,WAAUH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,OAAMf,SAAS,CAAC,GAAG,EAAEgB,UAAU,CAAE,EAAC;EACzEwB,eAAe,EAAE,CAAC;IAAE3B,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAW,CAAC,KACpD,WAAUH,MAAO,IAAGC,IAAK,IAAGC,OAAQ,YAAWV,WAAW,CAACW,UAAU,CAAC,IAAI,MAAO,SAAQ;EAC5FmB,YAAY,EAAE,CAAC;IAAErB,IAAI;IAAEC;EAAQ,CAAC,KAC7B,sBAAqBD,IAAK,IAAGC,OAAQ,EAAC;EACzC0B,OAAO,EAAGC,GAAG,IAAK;IAChB,IAAI,GAAG5B,IAAI,EAAEC,OAAO,EAAEkC,GAAG,CAAC,GAAGP,GAAG,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;;IAEvD;IACA,IAAI,CAAC,SAAS,CAAC,CAACM,QAAQ,CAACD,GAAG,CAAC,EAAE;MAC7B;IACF;IAEA,IAAIlC,OAAO,IAAIA,OAAO,CAACgC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACvChC,OAAO,GAAGA,OAAO,CAAC+B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC;IAEA,IAAI,CAAChC,IAAI,IAAI,CAACC,OAAO,EAAE;MACrB;IACF;IAEA,OAAO;MAAED,IAAI;MAAEC,OAAO;MAAEC,UAAU,EAAE0B,GAAG,CAACG,IAAI,CAACC,KAAK,CAAC,CAAC;IAAE,CAAC;EACzD;AACF,CAAC;AAED,KAAK,MAAM,CAACU,IAAI,EAAEC,IAAI,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACvB,KAAK,CAAC,EAAE;EAChDA,KAAK,CAACoB,IAAI,CAAC,GAAGE,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAEjD,QAAQ,EAAE8C,IAAI,CAAC;AACjD;AAEAI,MAAM,CAACC,OAAO,GAAG1B,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}