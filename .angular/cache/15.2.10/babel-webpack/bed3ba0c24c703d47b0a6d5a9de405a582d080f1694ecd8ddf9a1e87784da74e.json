{"ast":null,"code":"var _asyncToGenerator = require(\"I:/Angular/angular-blog/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  join,\n  sep\n} = require('path');\nconst getOptions = require('./common/get-options.js');\nconst {\n  mkdir,\n  mkdtemp,\n  rm\n} = require('fs/promises');\n\n// create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\nconst withTempDir = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (root, fn, opts) {\n    const options = getOptions(opts, {\n      copy: ['tmpPrefix']\n    });\n    // create the directory\n    yield mkdir(root, {\n      recursive: true\n    });\n    const target = yield mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''));\n    let err;\n    let result;\n    try {\n      result = yield fn(target);\n    } catch (_err) {\n      err = _err;\n    }\n    try {\n      yield rm(target, {\n        force: true,\n        recursive: true\n      });\n    } catch {\n      // ignore errors\n    }\n    if (err) {\n      throw err;\n    }\n    return result;\n  });\n  return function withTempDir(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = withTempDir;","map":{"version":3,"names":["join","sep","require","getOptions","mkdir","mkdtemp","rm","withTempDir","root","fn","opts","options","copy","recursive","target","tmpPrefix","err","result","_err","force","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/@npmcli/fs/lib/with-temp-dir.js"],"sourcesContent":["const { join, sep } = require('path')\n\nconst getOptions = require('./common/get-options.js')\nconst { mkdir, mkdtemp, rm } = require('fs/promises')\n\n// create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\nconst withTempDir = async (root, fn, opts) => {\n  const options = getOptions(opts, {\n    copy: ['tmpPrefix'],\n  })\n  // create the directory\n  await mkdir(root, { recursive: true })\n\n  const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''))\n  let err\n  let result\n\n  try {\n    result = await fn(target)\n  } catch (_err) {\n    err = _err\n  }\n\n  try {\n    await rm(target, { force: true, recursive: true })\n  } catch {\n    // ignore errors\n  }\n\n  if (err) {\n    throw err\n  }\n\n  return result\n}\n\nmodule.exports = withTempDir\n"],"mappings":";AAAA,MAAM;EAAEA,IAAI;EAAEC;AAAI,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAErC,MAAMC,UAAU,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACrD,MAAM;EAAEE,KAAK;EAAEC,OAAO;EAAEC;AAAG,CAAC,GAAGJ,OAAO,CAAC,aAAa,CAAC;;AAErD;AACA;AACA;AACA,MAAMK,WAAW;EAAA,6BAAG,WAAOC,IAAI,EAAEC,EAAE,EAAEC,IAAI,EAAK;IAC5C,MAAMC,OAAO,GAAGR,UAAU,CAACO,IAAI,EAAE;MAC/BE,IAAI,EAAE,CAAC,WAAW;IACpB,CAAC,CAAC;IACF;IACA,MAAMR,KAAK,CAACI,IAAI,EAAE;MAAEK,SAAS,EAAE;IAAK,CAAC,CAAC;IAEtC,MAAMC,MAAM,SAAST,OAAO,CAACL,IAAI,CAAE,GAAEQ,IAAK,GAAEP,GAAI,EAAC,EAAEU,OAAO,CAACI,SAAS,IAAI,EAAE,CAAC,CAAC;IAC5E,IAAIC,GAAG;IACP,IAAIC,MAAM;IAEV,IAAI;MACFA,MAAM,SAASR,EAAE,CAACK,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAOI,IAAI,EAAE;MACbF,GAAG,GAAGE,IAAI;IACZ;IAEA,IAAI;MACF,MAAMZ,EAAE,CAACQ,MAAM,EAAE;QAAEK,KAAK,EAAE,IAAI;QAAEN,SAAS,EAAE;MAAK,CAAC,CAAC;IACpD,CAAC,CAAC,MAAM;MACN;IAAA;IAGF,IAAIG,GAAG,EAAE;MACP,MAAMA,GAAG;IACX;IAEA,OAAOC,MAAM;EACf,CAAC;EAAA,gBA5BKV,WAAW;IAAA;EAAA;AAAA,GA4BhB;AAEDa,MAAM,CAACC,OAAO,GAAGd,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}