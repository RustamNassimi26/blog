{"ast":null,"code":"'use strict';\n\n// eslint-disable-next-line max-len\n// this code adapted from: https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/\nconst cmd = (input, doubleEscape) => {\n  if (!input.length) {\n    return '\"\"';\n  }\n  let result;\n  if (!/[ \\t\\n\\v\"]/.test(input)) {\n    result = input;\n  } else {\n    result = '\"';\n    for (let i = 0; i <= input.length; ++i) {\n      let slashCount = 0;\n      while (input[i] === '\\\\') {\n        ++i;\n        ++slashCount;\n      }\n      if (i === input.length) {\n        result += '\\\\'.repeat(slashCount * 2);\n        break;\n      }\n      if (input[i] === '\"') {\n        result += '\\\\'.repeat(slashCount * 2 + 1);\n        result += input[i];\n      } else {\n        result += '\\\\'.repeat(slashCount);\n        result += input[i];\n      }\n    }\n    result += '\"';\n  }\n\n  // and finally, prefix shell meta chars with a ^\n  result = result.replace(/[ !%^&()<>|\"]/g, '^$&');\n  if (doubleEscape) {\n    result = result.replace(/[ !%^&()<>|\"]/g, '^$&');\n  }\n  return result;\n};\nconst sh = input => {\n  if (!input.length) {\n    return `''`;\n  }\n  if (!/[\\t\\n\\r \"#$&'()*;<>?\\\\`|~]/.test(input)) {\n    return input;\n  }\n\n  // replace single quotes with '\\'' and wrap the whole result in a fresh set of quotes\n  const result = `'${input.replace(/'/g, `'\\\\''`)}'`\n  // if the input string already had single quotes around it, clean those up\n  .replace(/^(?:'')+(?!$)/, '').replace(/\\\\'''/g, `\\\\'`);\n  return result;\n};\nmodule.exports = {\n  cmd,\n  sh\n};","map":{"version":3,"names":["cmd","input","doubleEscape","length","result","test","i","slashCount","repeat","replace","sh","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/@npmcli/promise-spawn/lib/escape.js"],"sourcesContent":["'use strict'\n\n// eslint-disable-next-line max-len\n// this code adapted from: https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/\nconst cmd = (input, doubleEscape) => {\n  if (!input.length) {\n    return '\"\"'\n  }\n\n  let result\n  if (!/[ \\t\\n\\v\"]/.test(input)) {\n    result = input\n  } else {\n    result = '\"'\n    for (let i = 0; i <= input.length; ++i) {\n      let slashCount = 0\n      while (input[i] === '\\\\') {\n        ++i\n        ++slashCount\n      }\n\n      if (i === input.length) {\n        result += '\\\\'.repeat(slashCount * 2)\n        break\n      }\n\n      if (input[i] === '\"') {\n        result += '\\\\'.repeat(slashCount * 2 + 1)\n        result += input[i]\n      } else {\n        result += '\\\\'.repeat(slashCount)\n        result += input[i]\n      }\n    }\n    result += '\"'\n  }\n\n  // and finally, prefix shell meta chars with a ^\n  result = result.replace(/[ !%^&()<>|\"]/g, '^$&')\n  if (doubleEscape) {\n    result = result.replace(/[ !%^&()<>|\"]/g, '^$&')\n  }\n\n  return result\n}\n\nconst sh = (input) => {\n  if (!input.length) {\n    return `''`\n  }\n\n  if (!/[\\t\\n\\r \"#$&'()*;<>?\\\\`|~]/.test(input)) {\n    return input\n  }\n\n  // replace single quotes with '\\'' and wrap the whole result in a fresh set of quotes\n  const result = `'${input.replace(/'/g, `'\\\\''`)}'`\n    // if the input string already had single quotes around it, clean those up\n    .replace(/^(?:'')+(?!$)/, '')\n    .replace(/\\\\'''/g, `\\\\'`)\n\n  return result\n}\n\nmodule.exports = {\n  cmd,\n  sh,\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA,MAAMA,GAAG,GAAG,CAACC,KAAK,EAAEC,YAAY,KAAK;EACnC,IAAI,CAACD,KAAK,CAACE,MAAM,EAAE;IACjB,OAAO,IAAI;EACb;EAEA,IAAIC,MAAM;EACV,IAAI,CAAC,YAAY,CAACC,IAAI,CAACJ,KAAK,CAAC,EAAE;IAC7BG,MAAM,GAAGH,KAAK;EAChB,CAAC,MAAM;IACLG,MAAM,GAAG,GAAG;IACZ,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,KAAK,CAACE,MAAM,EAAE,EAAEG,CAAC,EAAE;MACtC,IAAIC,UAAU,GAAG,CAAC;MAClB,OAAON,KAAK,CAACK,CAAC,CAAC,KAAK,IAAI,EAAE;QACxB,EAAEA,CAAC;QACH,EAAEC,UAAU;MACd;MAEA,IAAID,CAAC,KAAKL,KAAK,CAACE,MAAM,EAAE;QACtBC,MAAM,IAAI,IAAI,CAACI,MAAM,CAACD,UAAU,GAAG,CAAC,CAAC;QACrC;MACF;MAEA,IAAIN,KAAK,CAACK,CAAC,CAAC,KAAK,GAAG,EAAE;QACpBF,MAAM,IAAI,IAAI,CAACI,MAAM,CAACD,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;QACzCH,MAAM,IAAIH,KAAK,CAACK,CAAC,CAAC;MACpB,CAAC,MAAM;QACLF,MAAM,IAAI,IAAI,CAACI,MAAM,CAACD,UAAU,CAAC;QACjCH,MAAM,IAAIH,KAAK,CAACK,CAAC,CAAC;MACpB;IACF;IACAF,MAAM,IAAI,GAAG;EACf;;EAEA;EACAA,MAAM,GAAGA,MAAM,CAACK,OAAO,CAAC,gBAAgB,EAAE,KAAK,CAAC;EAChD,IAAIP,YAAY,EAAE;IAChBE,MAAM,GAAGA,MAAM,CAACK,OAAO,CAAC,gBAAgB,EAAE,KAAK,CAAC;EAClD;EAEA,OAAOL,MAAM;AACf,CAAC;AAED,MAAMM,EAAE,GAAIT,KAAK,IAAK;EACpB,IAAI,CAACA,KAAK,CAACE,MAAM,EAAE;IACjB,OAAQ,IAAG;EACb;EAEA,IAAI,CAAC,4BAA4B,CAACE,IAAI,CAACJ,KAAK,CAAC,EAAE;IAC7C,OAAOA,KAAK;EACd;;EAEA;EACA,MAAMG,MAAM,GAAI,IAAGH,KAAK,CAACQ,OAAO,CAAC,IAAI,EAAG,OAAM,CAAE;EAC9C;EAAA,CACCA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,QAAQ,EAAG,KAAI,CAAC;EAE3B,OAAOL,MAAM;AACf,CAAC;AAEDO,MAAM,CAACC,OAAO,GAAG;EACfZ,GAAG;EACHU;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}