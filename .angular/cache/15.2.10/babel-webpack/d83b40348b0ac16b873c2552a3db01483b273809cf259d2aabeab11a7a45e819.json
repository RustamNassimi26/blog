{"ast":null,"code":"const {\n  resolve,\n  dirname,\n  delimiter\n} = require('path');\n// the path here is relative, even though it does not need to be\n// in order to make the posix tests pass in windows\nconst nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin');\n\n// Windows typically calls its PATH environ 'Path', but this is not\n// guaranteed, nor is it guaranteed to be the only one.  Merge them\n// all together in the order they appear in the object.\nconst setPATH = (projectPath, binPaths, env) => {\n  const PATH = Object.keys(env).filter(p => /^path$/i.test(p) && env[p]).map(p => env[p].split(delimiter)).reduce((set, p) => set.concat(p.filter(concatted => !set.includes(concatted))), []).join(delimiter);\n  const pathArr = [];\n  if (binPaths) {\n    pathArr.push(...binPaths);\n  }\n  // unshift the ./node_modules/.bin from every folder\n  // walk up until dirname() does nothing, at the root\n  // XXX we should specify a cwd that we don't go above\n  let p = projectPath;\n  let pp;\n  do {\n    pathArr.push(resolve(p, 'node_modules', '.bin'));\n    pp = p;\n    p = dirname(p);\n  } while (p !== pp);\n  pathArr.push(nodeGypPath, PATH);\n  const pathVal = pathArr.join(delimiter);\n\n  // XXX include the node-gyp-bin path somehow?  Probably better for\n  // npm or arborist or whoever to just provide that by putting it in\n  // the PATH environ, since that's preserved anyway.\n  for (const key of Object.keys(env)) {\n    if (/^path$/i.test(key)) {\n      env[key] = pathVal;\n    }\n  }\n  return env;\n};\nmodule.exports = setPATH;","map":{"version":3,"names":["resolve","dirname","delimiter","require","nodeGypPath","__dirname","setPATH","projectPath","binPaths","env","PATH","Object","keys","filter","p","test","map","split","reduce","set","concat","concatted","includes","join","pathArr","push","pp","pathVal","key","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/@npmcli/run-script/lib/set-path.js"],"sourcesContent":["const { resolve, dirname, delimiter } = require('path')\n// the path here is relative, even though it does not need to be\n// in order to make the posix tests pass in windows\nconst nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin')\n\n// Windows typically calls its PATH environ 'Path', but this is not\n// guaranteed, nor is it guaranteed to be the only one.  Merge them\n// all together in the order they appear in the object.\nconst setPATH = (projectPath, binPaths, env) => {\n  const PATH = Object.keys(env).filter(p => /^path$/i.test(p) && env[p])\n    .map(p => env[p].split(delimiter))\n    .reduce((set, p) => set.concat(p.filter(concatted => !set.includes(concatted))), [])\n    .join(delimiter)\n\n  const pathArr = []\n  if (binPaths) {\n    pathArr.push(...binPaths)\n  }\n  // unshift the ./node_modules/.bin from every folder\n  // walk up until dirname() does nothing, at the root\n  // XXX we should specify a cwd that we don't go above\n  let p = projectPath\n  let pp\n  do {\n    pathArr.push(resolve(p, 'node_modules', '.bin'))\n    pp = p\n    p = dirname(p)\n  } while (p !== pp)\n  pathArr.push(nodeGypPath, PATH)\n\n  const pathVal = pathArr.join(delimiter)\n\n  // XXX include the node-gyp-bin path somehow?  Probably better for\n  // npm or arborist or whoever to just provide that by putting it in\n  // the PATH environ, since that's preserved anyway.\n  for (const key of Object.keys(env)) {\n    if (/^path$/i.test(key)) {\n      env[key] = pathVal\n    }\n  }\n\n  return env\n}\n\nmodule.exports = setPATH\n"],"mappings":"AAAA,MAAM;EAAEA,OAAO;EAAEC,OAAO;EAAEC;AAAU,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACvD;AACA;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAACK,SAAS,EAAE,qBAAqB,CAAC;;AAE7D;AACA;AACA;AACA,MAAMC,OAAO,GAAG,CAACC,WAAW,EAAEC,QAAQ,EAAEC,GAAG,KAAK;EAC9C,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,MAAM,CAACC,CAAC,IAAI,SAAS,CAACC,IAAI,CAACD,CAAC,CAAC,IAAIL,GAAG,CAACK,CAAC,CAAC,CAAC,CACnEE,GAAG,CAACF,CAAC,IAAIL,GAAG,CAACK,CAAC,CAAC,CAACG,KAAK,CAACf,SAAS,CAAC,CAAC,CACjCgB,MAAM,CAAC,CAACC,GAAG,EAAEL,CAAC,KAAKK,GAAG,CAACC,MAAM,CAACN,CAAC,CAACD,MAAM,CAACQ,SAAS,IAAI,CAACF,GAAG,CAACG,QAAQ,CAACD,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CACnFE,IAAI,CAACrB,SAAS,CAAC;EAElB,MAAMsB,OAAO,GAAG,EAAE;EAClB,IAAIhB,QAAQ,EAAE;IACZgB,OAAO,CAACC,IAAI,CAAC,GAAGjB,QAAQ,CAAC;EAC3B;EACA;EACA;EACA;EACA,IAAIM,CAAC,GAAGP,WAAW;EACnB,IAAImB,EAAE;EACN,GAAG;IACDF,OAAO,CAACC,IAAI,CAACzB,OAAO,CAACc,CAAC,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;IAChDY,EAAE,GAAGZ,CAAC;IACNA,CAAC,GAAGb,OAAO,CAACa,CAAC,CAAC;EAChB,CAAC,QAAQA,CAAC,KAAKY,EAAE;EACjBF,OAAO,CAACC,IAAI,CAACrB,WAAW,EAAEM,IAAI,CAAC;EAE/B,MAAMiB,OAAO,GAAGH,OAAO,CAACD,IAAI,CAACrB,SAAS,CAAC;;EAEvC;EACA;EACA;EACA,KAAK,MAAM0B,GAAG,IAAIjB,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,EAAE;IAClC,IAAI,SAAS,CAACM,IAAI,CAACa,GAAG,CAAC,EAAE;MACvBnB,GAAG,CAACmB,GAAG,CAAC,GAAGD,OAAO;IACpB;EACF;EAEA,OAAOlB,GAAG;AACZ,CAAC;AAEDoB,MAAM,CAACC,OAAO,GAAGxB,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}