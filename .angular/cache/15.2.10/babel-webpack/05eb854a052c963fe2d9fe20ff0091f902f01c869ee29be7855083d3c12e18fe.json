{"ast":null,"code":"'use strict';\n\nconst LRU = require('lru-cache');\nconst hosts = require('./hosts.js');\nconst fromUrl = require('./from-url.js');\nconst parseUrl = require('./parse-url.js');\nconst cache = new LRU({\n  max: 1000\n});\nclass GitHost {\n  constructor(type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, GitHost.#gitHosts[type], {\n      type,\n      user,\n      auth,\n      project,\n      committish,\n      default: defaultRepresentation,\n      opts\n    });\n  }\n  static #gitHosts = {\n    byShortcut: {},\n    byDomain: {}\n  };\n  static #protocols = {\n    'git+ssh:': {\n      name: 'sshurl'\n    },\n    'ssh:': {\n      name: 'sshurl'\n    },\n    'git+https:': {\n      name: 'https',\n      auth: true\n    },\n    'git:': {\n      auth: true\n    },\n    'http:': {\n      auth: true\n    },\n    'https:': {\n      auth: true\n    },\n    'git+http:': {\n      auth: true\n    }\n  };\n  static addHost(name, host) {\n    GitHost.#gitHosts[name] = host;\n    GitHost.#gitHosts.byDomain[host.domain] = name;\n    GitHost.#gitHosts.byShortcut[`${name}:`] = name;\n    GitHost.#protocols[`${name}:`] = {\n      name\n    };\n  }\n  static fromUrl(giturl, opts) {\n    if (typeof giturl !== 'string') {\n      return;\n    }\n    const key = giturl + JSON.stringify(opts || {});\n    if (!cache.has(key)) {\n      const hostArgs = fromUrl(giturl, opts, {\n        gitHosts: GitHost.#gitHosts,\n        protocols: GitHost.#protocols\n      });\n      cache.set(key, hostArgs ? new GitHost(...hostArgs) : undefined);\n    }\n    return cache.get(key);\n  }\n  static parseUrl(url) {\n    return parseUrl(url);\n  }\n  #fill(template, opts) {\n    if (typeof template !== 'function') {\n      return null;\n    }\n    const options = {\n      ...this,\n      ...this.opts,\n      ...opts\n    };\n\n    // the path should always be set so we don't end up with 'undefined' in urls\n    if (!options.path) {\n      options.path = '';\n    }\n\n    // template functions will insert the leading slash themselves\n    if (options.path.startsWith('/')) {\n      options.path = options.path.slice(1);\n    }\n    if (options.noCommittish) {\n      options.committish = null;\n    }\n    const result = template(options);\n    return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result;\n  }\n  hash() {\n    return this.committish ? `#${this.committish}` : '';\n  }\n  ssh(opts) {\n    return this.#fill(this.sshtemplate, opts);\n  }\n  sshurl(opts) {\n    return this.#fill(this.sshurltemplate, opts);\n  }\n  browse(path, ...args) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this.#fill(this.browsetemplate, path);\n    }\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browsetreetemplate, {\n        ...args[0],\n        path\n      });\n    }\n    return this.#fill(this.browsetreetemplate, {\n      ...args[1],\n      fragment: args[0],\n      path\n    });\n  }\n\n  // If the path is known to be a file, then browseFile should be used. For some hosts\n  // the url is the same as browse, but for others like GitHub a file can use both `/tree/`\n  // and `/blob/` in the path. When using a default committish of `HEAD` then the `/tree/`\n  // path will redirect to a specific commit. Using the `/blob/` path avoids this and\n  // does not redirect to a different commit.\n  browseFile(path, ...args) {\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browseblobtemplate, {\n        ...args[0],\n        path\n      });\n    }\n    return this.#fill(this.browseblobtemplate, {\n      ...args[1],\n      fragment: args[0],\n      path\n    });\n  }\n  docs(opts) {\n    return this.#fill(this.docstemplate, opts);\n  }\n  bugs(opts) {\n    return this.#fill(this.bugstemplate, opts);\n  }\n  https(opts) {\n    return this.#fill(this.httpstemplate, opts);\n  }\n  git(opts) {\n    return this.#fill(this.gittemplate, opts);\n  }\n  shortcut(opts) {\n    return this.#fill(this.shortcuttemplate, opts);\n  }\n  path(opts) {\n    return this.#fill(this.pathtemplate, opts);\n  }\n  tarball(opts) {\n    return this.#fill(this.tarballtemplate, {\n      ...opts,\n      noCommittish: false\n    });\n  }\n  file(path, opts) {\n    return this.#fill(this.filetemplate, {\n      ...opts,\n      path\n    });\n  }\n  edit(path, opts) {\n    return this.#fill(this.edittemplate, {\n      ...opts,\n      path\n    });\n  }\n  getDefaultRepresentation() {\n    return this.default;\n  }\n  toString(opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts);\n    }\n    return this.sshurl(opts);\n  }\n}\nfor (const [name, host] of Object.entries(hosts)) {\n  GitHost.addHost(name, host);\n}\nmodule.exports = GitHost;","map":{"version":3,"names":["LRU","require","hosts","fromUrl","parseUrl","cache","max","GitHost","constructor","type","user","auth","project","committish","defaultRepresentation","opts","Object","assign","gitHosts","default","byShortcut","byDomain","protocols","name","addHost","host","domain","giturl","key","JSON","stringify","has","hostArgs","set","undefined","get","url","fill","template","options","path","startsWith","slice","noCommittish","result","noGitPlus","hash","ssh","sshtemplate","sshurl","sshurltemplate","browse","args","browsetemplate","browsetreetemplate","fragment","browseFile","browseblobtemplate","docs","docstemplate","bugs","bugstemplate","https","httpstemplate","git","gittemplate","shortcut","shortcuttemplate","pathtemplate","tarball","tarballtemplate","file","filetemplate","edit","edittemplate","getDefaultRepresentation","toString","entries","module","exports"],"sources":["I:/Angular/angular-blog/node_modules/npm-pick-manifest/node_modules/hosted-git-info/lib/index.js"],"sourcesContent":["'use strict'\n\nconst LRU = require('lru-cache')\nconst hosts = require('./hosts.js')\nconst fromUrl = require('./from-url.js')\nconst parseUrl = require('./parse-url.js')\n\nconst cache = new LRU({ max: 1000 })\n\nclass GitHost {\n  constructor (type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, GitHost.#gitHosts[type], {\n      type,\n      user,\n      auth,\n      project,\n      committish,\n      default: defaultRepresentation,\n      opts,\n    })\n  }\n\n  static #gitHosts = { byShortcut: {}, byDomain: {} }\n  static #protocols = {\n    'git+ssh:': { name: 'sshurl' },\n    'ssh:': { name: 'sshurl' },\n    'git+https:': { name: 'https', auth: true },\n    'git:': { auth: true },\n    'http:': { auth: true },\n    'https:': { auth: true },\n    'git+http:': { auth: true },\n  }\n\n  static addHost (name, host) {\n    GitHost.#gitHosts[name] = host\n    GitHost.#gitHosts.byDomain[host.domain] = name\n    GitHost.#gitHosts.byShortcut[`${name}:`] = name\n    GitHost.#protocols[`${name}:`] = { name }\n  }\n\n  static fromUrl (giturl, opts) {\n    if (typeof giturl !== 'string') {\n      return\n    }\n\n    const key = giturl + JSON.stringify(opts || {})\n\n    if (!cache.has(key)) {\n      const hostArgs = fromUrl(giturl, opts, {\n        gitHosts: GitHost.#gitHosts,\n        protocols: GitHost.#protocols,\n      })\n      cache.set(key, hostArgs ? new GitHost(...hostArgs) : undefined)\n    }\n\n    return cache.get(key)\n  }\n\n  static parseUrl (url) {\n    return parseUrl(url)\n  }\n\n  #fill (template, opts) {\n    if (typeof template !== 'function') {\n      return null\n    }\n\n    const options = { ...this, ...this.opts, ...opts }\n\n    // the path should always be set so we don't end up with 'undefined' in urls\n    if (!options.path) {\n      options.path = ''\n    }\n\n    // template functions will insert the leading slash themselves\n    if (options.path.startsWith('/')) {\n      options.path = options.path.slice(1)\n    }\n\n    if (options.noCommittish) {\n      options.committish = null\n    }\n\n    const result = template(options)\n    return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result\n  }\n\n  hash () {\n    return this.committish ? `#${this.committish}` : ''\n  }\n\n  ssh (opts) {\n    return this.#fill(this.sshtemplate, opts)\n  }\n\n  sshurl (opts) {\n    return this.#fill(this.sshurltemplate, opts)\n  }\n\n  browse (path, ...args) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this.#fill(this.browsetemplate, path)\n    }\n\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browsetreetemplate, { ...args[0], path })\n    }\n\n    return this.#fill(this.browsetreetemplate, { ...args[1], fragment: args[0], path })\n  }\n\n  // If the path is known to be a file, then browseFile should be used. For some hosts\n  // the url is the same as browse, but for others like GitHub a file can use both `/tree/`\n  // and `/blob/` in the path. When using a default committish of `HEAD` then the `/tree/`\n  // path will redirect to a specific commit. Using the `/blob/` path avoids this and\n  // does not redirect to a different commit.\n  browseFile (path, ...args) {\n    if (typeof args[0] !== 'string') {\n      return this.#fill(this.browseblobtemplate, { ...args[0], path })\n    }\n\n    return this.#fill(this.browseblobtemplate, { ...args[1], fragment: args[0], path })\n  }\n\n  docs (opts) {\n    return this.#fill(this.docstemplate, opts)\n  }\n\n  bugs (opts) {\n    return this.#fill(this.bugstemplate, opts)\n  }\n\n  https (opts) {\n    return this.#fill(this.httpstemplate, opts)\n  }\n\n  git (opts) {\n    return this.#fill(this.gittemplate, opts)\n  }\n\n  shortcut (opts) {\n    return this.#fill(this.shortcuttemplate, opts)\n  }\n\n  path (opts) {\n    return this.#fill(this.pathtemplate, opts)\n  }\n\n  tarball (opts) {\n    return this.#fill(this.tarballtemplate, { ...opts, noCommittish: false })\n  }\n\n  file (path, opts) {\n    return this.#fill(this.filetemplate, { ...opts, path })\n  }\n\n  edit (path, opts) {\n    return this.#fill(this.edittemplate, { ...opts, path })\n  }\n\n  getDefaultRepresentation () {\n    return this.default\n  }\n\n  toString (opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts)\n    }\n\n    return this.sshurl(opts)\n  }\n}\n\nfor (const [name, host] of Object.entries(hosts)) {\n  GitHost.addHost(name, host)\n}\n\nmodule.exports = GitHost\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}