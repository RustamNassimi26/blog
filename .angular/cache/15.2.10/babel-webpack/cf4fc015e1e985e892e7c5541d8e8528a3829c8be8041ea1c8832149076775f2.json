{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.auth.isAuthenticated()) {\n      return true;\n    } else {\n      this.auth.logout();\n      this.router.navigate(['/admin', 'login'], {\n        queryParams: {\n          loginAgain: true\n        }\n      });\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n}","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,SAAS;EACpBC,YACUC,IAAiB,EACjBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;EACb;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,IAAG,IAAI,CAACJ,IAAI,CAACK,eAAe,EAAE,EAAE;MAC9B,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACL,IAAI,CAACM,MAAM,EAAE;MAClB,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE;QACxCC,WAAW,EAAE;UACXC,UAAU,EAAE;;OAEf,CAAC;MACF,OAAO,KAAK;;EAEhB;EAAC;qBAlBUX,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAY,SAATZ,SAAS;EAAA","names":["AuthGuard","constructor","auth","router","canActivate","route","state","isAuthenticated","logout","navigate","queryParams","loginAgain","factory"],"sourceRoot":"","sources":["I:\\Angular\\angular-blog\\src\\app\\admin\\shared\\services\\auth.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private auth: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean | boolean {\r\n    if(this.auth.isAuthenticated()) {\r\n      return true\r\n    } else {\r\n      this.auth.logout()\r\n      this.router.navigate(['/admin', 'login'], {\r\n        queryParams: {\r\n          loginAgain: true\r\n        }\r\n      })\r\n      return false\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}