{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchematicEngineHost = void 0;\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\nconst fs_1 = require(\"fs\");\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nconst module_1 = require(\"module\");\nconst path_1 = require(\"path\");\nconst vm_1 = require(\"vm\");\nconst error_1 = require(\"../../utilities/error\");\n/**\n * Environment variable to control schematic package redirection\n */\nconst schematicRedirectVariable = (_a = process.env['NG_SCHEMATIC_REDIRECT']) === null || _a === void 0 ? void 0 : _a.toLowerCase();\nfunction shouldWrapSchematic(schematicFile, schematicEncapsulation) {\n  // Check environment variable if present\n  switch (schematicRedirectVariable) {\n    case '0':\n    case 'false':\n    case 'off':\n    case 'none':\n      return false;\n    case 'all':\n      return true;\n  }\n  const normalizedSchematicFile = schematicFile.replace(/\\\\/g, '/');\n  // Never wrap the internal update schematic when executed directly\n  // It communicates with the update command via `global`\n  // But we still want to redirect schematics located in `@angular/cli/node_modules`.\n  if (normalizedSchematicFile.includes('node_modules/@angular/cli/') && !normalizedSchematicFile.includes('node_modules/@angular/cli/node_modules/')) {\n    return false;\n  }\n  // Check for first-party Angular schematic packages\n  // Angular schematics are safe to use in the wrapped VM context\n  if (/\\/node_modules\\/@(?:angular|schematics|nguniversal)\\//.test(normalizedSchematicFile)) {\n    return true;\n  }\n  // Otherwise use the value of the schematic collection's encapsulation option (current default of false)\n  return schematicEncapsulation;\n}\nclass SchematicEngineHost extends tools_1.NodeModulesEngineHost {\n  _resolveReferenceString(refString, parentPath, collectionDescription) {\n    const [path, name] = refString.split('#', 2);\n    // Mimic behavior of ExportStringRef class used in default behavior\n    const fullPath = path[0] === '.' ? (0, path_1.resolve)(parentPath !== null && parentPath !== void 0 ? parentPath : process.cwd(), path) : path;\n    const referenceRequire = (0, module_1.createRequire)(__filename);\n    const schematicFile = referenceRequire.resolve(fullPath, {\n      paths: [parentPath]\n    });\n    if (shouldWrapSchematic(schematicFile, !!(collectionDescription === null || collectionDescription === void 0 ? void 0 : collectionDescription.encapsulation))) {\n      const schematicPath = (0, path_1.dirname)(schematicFile);\n      const moduleCache = new Map();\n      const factoryInitializer = wrap(schematicFile, schematicPath, moduleCache, name || 'default');\n      const factory = factoryInitializer();\n      if (!factory || typeof factory !== 'function') {\n        return null;\n      }\n      return {\n        ref: factory,\n        path: schematicPath\n      };\n    }\n    // All other schematics use default behavior\n    return super._resolveReferenceString(refString, parentPath, collectionDescription);\n  }\n}\nexports.SchematicEngineHost = SchematicEngineHost;\n/**\n * Minimal shim modules for legacy deep imports of `@schematics/angular`\n */\nconst legacyModules = {\n  '@schematics/angular/utility/config': {\n    getWorkspace(host) {\n      const path = '/.angular.json';\n      const data = host.read(path);\n      if (!data) {\n        throw new schematics_1.SchematicsException(`Could not find (${path})`);\n      }\n      return (0, jsonc_parser_1.parse)(data.toString(), [], {\n        allowTrailingComma: true\n      });\n    }\n  },\n  '@schematics/angular/utility/project': {\n    buildDefaultPath(project) {\n      const root = project.sourceRoot ? `/${project.sourceRoot}/` : `/${project.root}/src/`;\n      return `${root}${project.projectType === 'application' ? 'app' : 'lib'}`;\n    }\n  }\n};\n/**\n * Wrap a JavaScript file in a VM context to allow specific Angular dependencies to be redirected.\n * This VM setup is ONLY intended to redirect dependencies.\n *\n * @param schematicFile A JavaScript schematic file path that should be wrapped.\n * @param schematicDirectory A directory that will be used as the location of the JavaScript file.\n * @param moduleCache A map to use for caching repeat module usage and proper `instanceof` support.\n * @param exportName An optional name of a specific export to return. Otherwise, return all exports.\n */\nfunction wrap(schematicFile, schematicDirectory, moduleCache, exportName) {\n  const hostRequire = (0, module_1.createRequire)(__filename);\n  const schematicRequire = (0, module_1.createRequire)(schematicFile);\n  const customRequire = function (id) {\n    if (legacyModules[id]) {\n      // Provide compatibility modules for older versions of @angular/cdk\n      return legacyModules[id];\n    } else if (id.startsWith('schematics:')) {\n      // Schematics built-in modules use the `schematics` scheme (similar to the Node.js `node` scheme)\n      const builtinId = id.slice(11);\n      const builtinModule = loadBuiltinModule(builtinId);\n      if (!builtinModule) {\n        throw new Error(`Unknown schematics built-in module '${id}' requested from schematic '${schematicFile}'`);\n      }\n      return builtinModule;\n    } else if (id.startsWith('@angular-devkit/') || id.startsWith('@schematics/')) {\n      // Files should not redirect `@angular/core` and instead use the direct\n      // dependency if available. This allows old major version migrations to continue to function\n      // even though the latest major version may have breaking changes in `@angular/core`.\n      if (id.startsWith('@angular-devkit/core')) {\n        try {\n          return schematicRequire(id);\n        } catch (e) {\n          (0, error_1.assertIsError)(e);\n          if (e.code !== 'MODULE_NOT_FOUND') {\n            throw e;\n          }\n        }\n      }\n      // Resolve from inside the `@angular/cli` project\n      return hostRequire(id);\n    } else if (id.startsWith('.') || id.startsWith('@angular/cdk')) {\n      // Wrap relative files inside the schematic collection\n      // Also wrap `@angular/cdk`, it contains helper utilities that import core schematic packages\n      // Resolve from the original file\n      const modulePath = schematicRequire.resolve(id);\n      // Use cached module if available\n      const cachedModule = moduleCache.get(modulePath);\n      if (cachedModule) {\n        return cachedModule;\n      }\n      // Do not wrap vendored third-party packages or JSON files\n      if (!/[/\\\\]node_modules[/\\\\]@schematics[/\\\\]angular[/\\\\]third_party[/\\\\]/.test(modulePath) && !modulePath.endsWith('.json')) {\n        // Wrap module and save in cache\n        const wrappedModule = wrap(modulePath, (0, path_1.dirname)(modulePath), moduleCache)();\n        moduleCache.set(modulePath, wrappedModule);\n        return wrappedModule;\n      }\n    }\n    // All others are required directly from the original file\n    return schematicRequire(id);\n  };\n  // Setup a wrapper function to capture the module's exports\n  const schematicCode = (0, fs_1.readFileSync)(schematicFile, 'utf8');\n  // `module` is required due to @angular/localize ng-add being in UMD format\n  const headerCode = '(function() {\\nvar exports = {};\\nvar module = { exports };\\n';\n  const footerCode = exportName ? `\\nreturn module.exports['${exportName}'];});` : '\\nreturn module.exports;});';\n  const script = new vm_1.Script(headerCode + schematicCode + footerCode, {\n    filename: schematicFile,\n    lineOffset: 3\n  });\n  const context = {\n    __dirname: schematicDirectory,\n    __filename: schematicFile,\n    Buffer,\n    console,\n    process,\n    get global() {\n      return this;\n    },\n    require: customRequire\n  };\n  const exportsFactory = script.runInNewContext(context);\n  return exportsFactory;\n}\nfunction loadBuiltinModule(id) {\n  return undefined;\n}","map":{"version":3,"names":["_a","Object","defineProperty","exports","value","SchematicEngineHost","schematics_1","require","tools_1","fs_1","jsonc_parser_1","module_1","path_1","vm_1","error_1","schematicRedirectVariable","process","env","toLowerCase","shouldWrapSchematic","schematicFile","schematicEncapsulation","normalizedSchematicFile","replace","includes","test","NodeModulesEngineHost","_resolveReferenceString","refString","parentPath","collectionDescription","path","name","split","fullPath","resolve","cwd","referenceRequire","createRequire","__filename","paths","encapsulation","schematicPath","dirname","moduleCache","Map","factoryInitializer","wrap","factory","ref","legacyModules","getWorkspace","host","data","read","SchematicsException","parse","toString","allowTrailingComma","buildDefaultPath","project","root","sourceRoot","projectType","schematicDirectory","exportName","hostRequire","schematicRequire","customRequire","id","startsWith","builtinId","slice","builtinModule","loadBuiltinModule","Error","e","assertIsError","code","modulePath","cachedModule","get","endsWith","wrappedModule","set","schematicCode","readFileSync","headerCode","footerCode","script","Script","filename","lineOffset","context","__dirname","Buffer","console","global","exportsFactory","runInNewContext","undefined"],"sources":["I:/Angular/angular-blog/node_modules/@angular/cli/src/command-builder/utilities/schematic-engine-host.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchematicEngineHost = void 0;\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\nconst fs_1 = require(\"fs\");\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nconst module_1 = require(\"module\");\nconst path_1 = require(\"path\");\nconst vm_1 = require(\"vm\");\nconst error_1 = require(\"../../utilities/error\");\n/**\n * Environment variable to control schematic package redirection\n */\nconst schematicRedirectVariable = (_a = process.env['NG_SCHEMATIC_REDIRECT']) === null || _a === void 0 ? void 0 : _a.toLowerCase();\nfunction shouldWrapSchematic(schematicFile, schematicEncapsulation) {\n    // Check environment variable if present\n    switch (schematicRedirectVariable) {\n        case '0':\n        case 'false':\n        case 'off':\n        case 'none':\n            return false;\n        case 'all':\n            return true;\n    }\n    const normalizedSchematicFile = schematicFile.replace(/\\\\/g, '/');\n    // Never wrap the internal update schematic when executed directly\n    // It communicates with the update command via `global`\n    // But we still want to redirect schematics located in `@angular/cli/node_modules`.\n    if (normalizedSchematicFile.includes('node_modules/@angular/cli/') &&\n        !normalizedSchematicFile.includes('node_modules/@angular/cli/node_modules/')) {\n        return false;\n    }\n    // Check for first-party Angular schematic packages\n    // Angular schematics are safe to use in the wrapped VM context\n    if (/\\/node_modules\\/@(?:angular|schematics|nguniversal)\\//.test(normalizedSchematicFile)) {\n        return true;\n    }\n    // Otherwise use the value of the schematic collection's encapsulation option (current default of false)\n    return schematicEncapsulation;\n}\nclass SchematicEngineHost extends tools_1.NodeModulesEngineHost {\n    _resolveReferenceString(refString, parentPath, collectionDescription) {\n        const [path, name] = refString.split('#', 2);\n        // Mimic behavior of ExportStringRef class used in default behavior\n        const fullPath = path[0] === '.' ? (0, path_1.resolve)(parentPath !== null && parentPath !== void 0 ? parentPath : process.cwd(), path) : path;\n        const referenceRequire = (0, module_1.createRequire)(__filename);\n        const schematicFile = referenceRequire.resolve(fullPath, { paths: [parentPath] });\n        if (shouldWrapSchematic(schematicFile, !!(collectionDescription === null || collectionDescription === void 0 ? void 0 : collectionDescription.encapsulation))) {\n            const schematicPath = (0, path_1.dirname)(schematicFile);\n            const moduleCache = new Map();\n            const factoryInitializer = wrap(schematicFile, schematicPath, moduleCache, name || 'default');\n            const factory = factoryInitializer();\n            if (!factory || typeof factory !== 'function') {\n                return null;\n            }\n            return { ref: factory, path: schematicPath };\n        }\n        // All other schematics use default behavior\n        return super._resolveReferenceString(refString, parentPath, collectionDescription);\n    }\n}\nexports.SchematicEngineHost = SchematicEngineHost;\n/**\n * Minimal shim modules for legacy deep imports of `@schematics/angular`\n */\nconst legacyModules = {\n    '@schematics/angular/utility/config': {\n        getWorkspace(host) {\n            const path = '/.angular.json';\n            const data = host.read(path);\n            if (!data) {\n                throw new schematics_1.SchematicsException(`Could not find (${path})`);\n            }\n            return (0, jsonc_parser_1.parse)(data.toString(), [], { allowTrailingComma: true });\n        },\n    },\n    '@schematics/angular/utility/project': {\n        buildDefaultPath(project) {\n            const root = project.sourceRoot ? `/${project.sourceRoot}/` : `/${project.root}/src/`;\n            return `${root}${project.projectType === 'application' ? 'app' : 'lib'}`;\n        },\n    },\n};\n/**\n * Wrap a JavaScript file in a VM context to allow specific Angular dependencies to be redirected.\n * This VM setup is ONLY intended to redirect dependencies.\n *\n * @param schematicFile A JavaScript schematic file path that should be wrapped.\n * @param schematicDirectory A directory that will be used as the location of the JavaScript file.\n * @param moduleCache A map to use for caching repeat module usage and proper `instanceof` support.\n * @param exportName An optional name of a specific export to return. Otherwise, return all exports.\n */\nfunction wrap(schematicFile, schematicDirectory, moduleCache, exportName) {\n    const hostRequire = (0, module_1.createRequire)(__filename);\n    const schematicRequire = (0, module_1.createRequire)(schematicFile);\n    const customRequire = function (id) {\n        if (legacyModules[id]) {\n            // Provide compatibility modules for older versions of @angular/cdk\n            return legacyModules[id];\n        }\n        else if (id.startsWith('schematics:')) {\n            // Schematics built-in modules use the `schematics` scheme (similar to the Node.js `node` scheme)\n            const builtinId = id.slice(11);\n            const builtinModule = loadBuiltinModule(builtinId);\n            if (!builtinModule) {\n                throw new Error(`Unknown schematics built-in module '${id}' requested from schematic '${schematicFile}'`);\n            }\n            return builtinModule;\n        }\n        else if (id.startsWith('@angular-devkit/') || id.startsWith('@schematics/')) {\n            // Files should not redirect `@angular/core` and instead use the direct\n            // dependency if available. This allows old major version migrations to continue to function\n            // even though the latest major version may have breaking changes in `@angular/core`.\n            if (id.startsWith('@angular-devkit/core')) {\n                try {\n                    return schematicRequire(id);\n                }\n                catch (e) {\n                    (0, error_1.assertIsError)(e);\n                    if (e.code !== 'MODULE_NOT_FOUND') {\n                        throw e;\n                    }\n                }\n            }\n            // Resolve from inside the `@angular/cli` project\n            return hostRequire(id);\n        }\n        else if (id.startsWith('.') || id.startsWith('@angular/cdk')) {\n            // Wrap relative files inside the schematic collection\n            // Also wrap `@angular/cdk`, it contains helper utilities that import core schematic packages\n            // Resolve from the original file\n            const modulePath = schematicRequire.resolve(id);\n            // Use cached module if available\n            const cachedModule = moduleCache.get(modulePath);\n            if (cachedModule) {\n                return cachedModule;\n            }\n            // Do not wrap vendored third-party packages or JSON files\n            if (!/[/\\\\]node_modules[/\\\\]@schematics[/\\\\]angular[/\\\\]third_party[/\\\\]/.test(modulePath) &&\n                !modulePath.endsWith('.json')) {\n                // Wrap module and save in cache\n                const wrappedModule = wrap(modulePath, (0, path_1.dirname)(modulePath), moduleCache)();\n                moduleCache.set(modulePath, wrappedModule);\n                return wrappedModule;\n            }\n        }\n        // All others are required directly from the original file\n        return schematicRequire(id);\n    };\n    // Setup a wrapper function to capture the module's exports\n    const schematicCode = (0, fs_1.readFileSync)(schematicFile, 'utf8');\n    // `module` is required due to @angular/localize ng-add being in UMD format\n    const headerCode = '(function() {\\nvar exports = {};\\nvar module = { exports };\\n';\n    const footerCode = exportName\n        ? `\\nreturn module.exports['${exportName}'];});`\n        : '\\nreturn module.exports;});';\n    const script = new vm_1.Script(headerCode + schematicCode + footerCode, {\n        filename: schematicFile,\n        lineOffset: 3,\n    });\n    const context = {\n        __dirname: schematicDirectory,\n        __filename: schematicFile,\n        Buffer,\n        console,\n        process,\n        get global() {\n            return this;\n        },\n        require: customRequire,\n    };\n    const exportsFactory = script.runInNewContext(context);\n    return exportsFactory;\n}\nfunction loadBuiltinModule(id) {\n    return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}