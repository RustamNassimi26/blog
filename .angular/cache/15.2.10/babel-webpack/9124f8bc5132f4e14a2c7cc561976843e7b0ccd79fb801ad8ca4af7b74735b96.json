{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"I:/Angular/angular-blog/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchematicsCommandModule = exports.DEFAULT_SCHEMATICS_COLLECTION = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\nconst path_1 = require(\"path\");\nconst analytics_1 = require(\"../analytics/analytics\");\nconst analytics_parameters_1 = require(\"../analytics/analytics-parameters\");\nconst config_1 = require(\"../utilities/config\");\nconst error_1 = require(\"../utilities/error\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst tty_1 = require(\"../utilities/tty\");\nconst command_module_1 = require(\"./command-module\");\nconst json_schema_1 = require(\"./utilities/json-schema\");\nconst schematic_engine_host_1 = require(\"./utilities/schematic-engine-host\");\nconst schematic_workflow_1 = require(\"./utilities/schematic-workflow\");\nexports.DEFAULT_SCHEMATICS_COLLECTION = '@schematics/angular';\nclass SchematicsCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.scope = command_module_1.CommandScope.In;\n    this.allowPrivateSchematics = false;\n    this.defaultProjectDeprecationWarningShown = false;\n  }\n  builder(argv) {\n    return _asyncToGenerator(function* () {\n      return argv.option('interactive', {\n        describe: 'Enable interactive input prompts.',\n        type: 'boolean',\n        default: true\n      }).option('dry-run', {\n        describe: 'Run through and reports activity without writing out results.',\n        type: 'boolean',\n        default: false\n      }).option('defaults', {\n        describe: 'Disable interactive input prompts for options with a default.',\n        type: 'boolean',\n        default: false\n      }).option('force', {\n        describe: 'Force overwriting of existing files.',\n        type: 'boolean',\n        default: false\n      }).strict();\n    })();\n  }\n  /** Get schematic schema options.*/\n  getSchematicOptions(collection, schematicName, workflow) {\n    return _asyncToGenerator(function* () {\n      const schematic = collection.createSchematic(schematicName, true);\n      const {\n        schemaJson\n      } = schematic.description;\n      if (!schemaJson) {\n        return [];\n      }\n      return (0, json_schema_1.parseJsonSchemaToOptions)(workflow.registry, schemaJson);\n    })();\n  }\n  getOrCreateWorkflowForBuilder(collectionName) {\n    return new tools_1.NodeWorkflow(this.context.root, {\n      resolvePaths: this.getResolvePaths(collectionName),\n      engineHostCreator: options => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths)\n    });\n  }\n  getOrCreateWorkflowForExecution(collectionName, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        logger,\n        root,\n        packageManager\n      } = _this.context;\n      const {\n        force,\n        dryRun,\n        packageRegistry\n      } = options;\n      const workflow = new tools_1.NodeWorkflow(root, {\n        force,\n        dryRun,\n        packageManager: packageManager.name,\n        // A schema registry is required to allow customizing addUndefinedDefaults\n        registry: new core_1.schema.CoreSchemaRegistry(schematics_1.formats.standardFormats),\n        packageRegistry,\n        resolvePaths: _this.getResolvePaths(collectionName),\n        schemaValidation: true,\n        optionTransforms: [\n        /*#__PURE__*/\n        // Add configuration file defaults\n        function () {\n          var _ref = _asyncToGenerator(function* (schematic, current) {\n            const projectName = typeof (current === null || current === void 0 ? void 0 : current.project) === 'string' ? current.project : _this.getProjectName();\n            return {\n              ...(yield (0, config_1.getSchematicDefaults)(schematic.collection.name, schematic.name, projectName)),\n              ...current\n            };\n          });\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }()],\n        engineHostCreator: options => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths)\n      });\n      workflow.registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n      workflow.registry.useXDeprecatedProvider(msg => logger.warn(msg));\n      workflow.registry.addSmartDefaultProvider('projectName', () => _this.getProjectName());\n      const workingDir = (0, core_1.normalize)((0, path_1.relative)(_this.context.root, process.cwd()));\n      workflow.registry.addSmartDefaultProvider('workingDirectory', () => workingDir === '' ? undefined : workingDir);\n      let shouldReportAnalytics = true;\n      workflow.engineHost.registerOptionsTransform( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (schematic, options) {\n          // Report analytics\n          if (shouldReportAnalytics) {\n            shouldReportAnalytics = false;\n            const {\n              collection: {\n                name: collectionName\n              },\n              name: schematicName\n            } = schematic;\n            const analytics = (0, analytics_1.isPackageNameSafeForAnalytics)(collectionName) ? yield _this.getAnalytics() : undefined;\n            analytics === null || analytics === void 0 ? void 0 : analytics.reportSchematicRunEvent({\n              [analytics_parameters_1.EventCustomDimension.SchematicCollectionName]: collectionName,\n              [analytics_parameters_1.EventCustomDimension.SchematicName]: schematicName,\n              ..._this.getAnalyticsParameters(options)\n            });\n          }\n          return options;\n        });\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      if (options.interactive !== false && (0, tty_1.isTTY)()) {\n        workflow.registry.usePromptProvider( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (definitions) {\n            const questions = definitions.filter(definition => !options.defaults || definition.default === undefined).map(definition => {\n              var _a;\n              const question = {\n                name: definition.id,\n                message: definition.message,\n                default: definition.default\n              };\n              const validator = definition.validator;\n              if (validator) {\n                question.validate = input => validator(input);\n                // Filter allows transformation of the value prior to validation\n                question.filter = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator(function* (input) {\n                    for (const type of definition.propertyTypes) {\n                      let value;\n                      switch (type) {\n                        case 'string':\n                          value = String(input);\n                          break;\n                        case 'integer':\n                        case 'number':\n                          value = Number(input);\n                          break;\n                        default:\n                          value = input;\n                          break;\n                      }\n                      // Can be a string if validation fails\n                      const isValid = (yield validator(value)) === true;\n                      if (isValid) {\n                        return value;\n                      }\n                    }\n                    return input;\n                  });\n                  return function (_x6) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n              }\n              switch (definition.type) {\n                case 'confirmation':\n                  question.type = 'confirm';\n                  break;\n                case 'list':\n                  question.type = definition.multiselect ? 'checkbox' : 'list';\n                  question.choices = (_a = definition.items) === null || _a === void 0 ? void 0 : _a.map(item => {\n                    return typeof item == 'string' ? item : {\n                      name: item.label,\n                      value: item.value\n                    };\n                  });\n                  break;\n                default:\n                  question.type = definition.type;\n                  break;\n              }\n              return question;\n            });\n            if (questions.length) {\n              const {\n                prompt\n              } = yield Promise.resolve().then(() => __importStar(require('inquirer')));\n              return prompt(questions);\n            } else {\n              return {};\n            }\n          });\n          return function (_x5) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n      return workflow;\n    })();\n  }\n  getSchematicCollections() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      // Resolve relative collections from the location of `angular.json`\n      const resolveRelativeCollection = collectionName => collectionName.charAt(0) === '.' ? (0, path_1.resolve)(_this2.context.root, collectionName) : collectionName;\n      const getSchematicCollections = configSection => {\n        if (!configSection) {\n          return undefined;\n        }\n        const {\n          schematicCollections,\n          defaultCollection\n        } = configSection;\n        if (Array.isArray(schematicCollections)) {\n          return new Set(schematicCollections.map(c => resolveRelativeCollection(c)));\n        } else if (typeof defaultCollection === 'string') {\n          return new Set([resolveRelativeCollection(defaultCollection)]);\n        }\n        return undefined;\n      };\n      const {\n        workspace,\n        globalConfiguration\n      } = _this2.context;\n      if (workspace) {\n        const project = (0, config_1.getProjectByCwd)(workspace);\n        if (project) {\n          const value = getSchematicCollections(workspace.getProjectCli(project));\n          if (value) {\n            return value;\n          }\n        }\n      }\n      const value = (_a = getSchematicCollections(workspace === null || workspace === void 0 ? void 0 : workspace.getCli())) !== null && _a !== void 0 ? _a : getSchematicCollections(globalConfiguration.getCli());\n      if (value) {\n        return value;\n      }\n      return new Set([exports.DEFAULT_SCHEMATICS_COLLECTION]);\n    })();\n  }\n  parseSchematicInfo(schematic) {\n    if (schematic === null || schematic === void 0 ? void 0 : schematic.includes(':')) {\n      const [collectionName, schematicName] = schematic.split(':', 2);\n      return [collectionName, schematicName];\n    }\n    return [undefined, schematic];\n  }\n  runSchematic(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        logger\n      } = _this3.context;\n      const {\n        schematicOptions,\n        executionOptions,\n        collectionName,\n        schematicName\n      } = options;\n      const workflow = yield _this3.getOrCreateWorkflowForExecution(collectionName, executionOptions);\n      if (!schematicName) {\n        throw new Error('schematicName cannot be undefined.');\n      }\n      const {\n        unsubscribe,\n        files\n      } = (0, schematic_workflow_1.subscribeToWorkflow)(workflow, logger);\n      try {\n        yield workflow.execute({\n          collection: collectionName,\n          schematic: schematicName,\n          options: schematicOptions,\n          logger,\n          allowPrivate: _this3.allowPrivateSchematics\n        }).toPromise();\n        if (!files.size) {\n          logger.info('Nothing to be done.');\n        }\n        if (executionOptions.dryRun) {\n          logger.warn(`\\nNOTE: The \"--dry-run\" option means no changes were made.`);\n        }\n      } catch (err) {\n        // In case the workflow was not successful, show an appropriate error message.\n        if (err instanceof schematics_1.UnsuccessfulWorkflowExecution) {\n          // \"See above\" because we already printed the error.\n          logger.fatal('The Schematic workflow failed. See above.');\n        } else {\n          (0, error_1.assertIsError)(err);\n          logger.fatal(err.message);\n        }\n        return 1;\n      } finally {\n        unsubscribe();\n      }\n      return 0;\n    })();\n  }\n  getProjectName() {\n    const {\n      workspace,\n      logger\n    } = this.context;\n    if (!workspace) {\n      return undefined;\n    }\n    const projectName = (0, config_1.getProjectByCwd)(workspace);\n    if (projectName) {\n      return projectName;\n    }\n    const defaultProjectName = workspace.extensions['defaultProject'];\n    if (typeof defaultProjectName === 'string' && defaultProjectName) {\n      if (!this.defaultProjectDeprecationWarningShown) {\n        logger.warn(core_1.tags.oneLine`\n             DEPRECATED: The 'defaultProject' workspace option has been deprecated.\n             The project to use will be determined from the current working directory.\n           `);\n        this.defaultProjectDeprecationWarningShown = true;\n      }\n      return defaultProjectName;\n    }\n    return undefined;\n  }\n  getResolvePaths(collectionName) {\n    const {\n      workspace,\n      root\n    } = this.context;\n    return workspace ?\n    // Workspace\n    collectionName === exports.DEFAULT_SCHEMATICS_COLLECTION ?\n    // Favor __dirname for @schematics/angular to use the build-in version\n    [__dirname, process.cwd(), root] : [process.cwd(), root, __dirname] :\n    // Global\n    [__dirname, process.cwd()];\n  }\n}\n__decorate([memoize_1.memoize], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForBuilder\", null);\n__decorate([memoize_1.memoize], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForExecution\", null);\n__decorate([memoize_1.memoize], SchematicsCommandModule.prototype, \"getSchematicCollections\", null);\nexports.SchematicsCommandModule = SchematicsCommandModule;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__decorate","decorators","target","key","c","arguments","length","r","d","Reflect","decorate","i","__importStar","mod","result","prototype","hasOwnProperty","call","exports","SchematicsCommandModule","DEFAULT_SCHEMATICS_COLLECTION","core_1","require","schematics_1","tools_1","path_1","analytics_1","analytics_parameters_1","config_1","error_1","memoize_1","tty_1","command_module_1","json_schema_1","schematic_engine_host_1","schematic_workflow_1","CommandModule","constructor","scope","CommandScope","In","allowPrivateSchematics","defaultProjectDeprecationWarningShown","builder","argv","option","describe","type","default","strict","getSchematicOptions","collection","schematicName","workflow","schematic","createSchematic","schemaJson","description","parseJsonSchemaToOptions","registry","getOrCreateWorkflowForBuilder","collectionName","NodeWorkflow","context","root","resolvePaths","getResolvePaths","engineHostCreator","options","SchematicEngineHost","getOrCreateWorkflowForExecution","logger","packageManager","force","dryRun","packageRegistry","name","schema","CoreSchemaRegistry","formats","standardFormats","schemaValidation","optionTransforms","current","projectName","project","getProjectName","getSchematicDefaults","addPostTransform","transforms","addUndefinedDefaults","useXDeprecatedProvider","msg","warn","addSmartDefaultProvider","workingDir","normalize","relative","process","cwd","shouldReportAnalytics","engineHost","registerOptionsTransform","analytics","isPackageNameSafeForAnalytics","getAnalytics","reportSchematicRunEvent","EventCustomDimension","SchematicCollectionName","SchematicName","getAnalyticsParameters","interactive","isTTY","usePromptProvider","definitions","questions","filter","definition","defaults","map","_a","question","id","message","validator","validate","input","propertyTypes","String","Number","isValid","multiselect","choices","items","item","label","prompt","Promise","resolve","then","getSchematicCollections","resolveRelativeCollection","charAt","configSection","schematicCollections","defaultCollection","Array","isArray","Set","workspace","globalConfiguration","getProjectByCwd","getProjectCli","getCli","parseSchematicInfo","includes","split","runSchematic","schematicOptions","executionOptions","Error","unsubscribe","files","subscribeToWorkflow","execute","allowPrivate","toPromise","size","info","err","UnsuccessfulWorkflowExecution","fatal","assertIsError","defaultProjectName","extensions","tags","oneLine","__dirname","memoize"],"sources":["I:/Angular/angular-blog/node_modules/@angular/cli/src/command-builder/schematics-command-module.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchematicsCommandModule = exports.DEFAULT_SCHEMATICS_COLLECTION = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\nconst path_1 = require(\"path\");\nconst analytics_1 = require(\"../analytics/analytics\");\nconst analytics_parameters_1 = require(\"../analytics/analytics-parameters\");\nconst config_1 = require(\"../utilities/config\");\nconst error_1 = require(\"../utilities/error\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst tty_1 = require(\"../utilities/tty\");\nconst command_module_1 = require(\"./command-module\");\nconst json_schema_1 = require(\"./utilities/json-schema\");\nconst schematic_engine_host_1 = require(\"./utilities/schematic-engine-host\");\nconst schematic_workflow_1 = require(\"./utilities/schematic-workflow\");\nexports.DEFAULT_SCHEMATICS_COLLECTION = '@schematics/angular';\nclass SchematicsCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.scope = command_module_1.CommandScope.In;\n        this.allowPrivateSchematics = false;\n        this.defaultProjectDeprecationWarningShown = false;\n    }\n    async builder(argv) {\n        return argv\n            .option('interactive', {\n            describe: 'Enable interactive input prompts.',\n            type: 'boolean',\n            default: true,\n        })\n            .option('dry-run', {\n            describe: 'Run through and reports activity without writing out results.',\n            type: 'boolean',\n            default: false,\n        })\n            .option('defaults', {\n            describe: 'Disable interactive input prompts for options with a default.',\n            type: 'boolean',\n            default: false,\n        })\n            .option('force', {\n            describe: 'Force overwriting of existing files.',\n            type: 'boolean',\n            default: false,\n        })\n            .strict();\n    }\n    /** Get schematic schema options.*/\n    async getSchematicOptions(collection, schematicName, workflow) {\n        const schematic = collection.createSchematic(schematicName, true);\n        const { schemaJson } = schematic.description;\n        if (!schemaJson) {\n            return [];\n        }\n        return (0, json_schema_1.parseJsonSchemaToOptions)(workflow.registry, schemaJson);\n    }\n    getOrCreateWorkflowForBuilder(collectionName) {\n        return new tools_1.NodeWorkflow(this.context.root, {\n            resolvePaths: this.getResolvePaths(collectionName),\n            engineHostCreator: (options) => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths),\n        });\n    }\n    async getOrCreateWorkflowForExecution(collectionName, options) {\n        const { logger, root, packageManager } = this.context;\n        const { force, dryRun, packageRegistry } = options;\n        const workflow = new tools_1.NodeWorkflow(root, {\n            force,\n            dryRun,\n            packageManager: packageManager.name,\n            // A schema registry is required to allow customizing addUndefinedDefaults\n            registry: new core_1.schema.CoreSchemaRegistry(schematics_1.formats.standardFormats),\n            packageRegistry,\n            resolvePaths: this.getResolvePaths(collectionName),\n            schemaValidation: true,\n            optionTransforms: [\n                // Add configuration file defaults\n                async (schematic, current) => {\n                    const projectName = typeof (current === null || current === void 0 ? void 0 : current.project) === 'string' ? current.project : this.getProjectName();\n                    return {\n                        ...(await (0, config_1.getSchematicDefaults)(schematic.collection.name, schematic.name, projectName)),\n                        ...current,\n                    };\n                },\n            ],\n            engineHostCreator: (options) => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths),\n        });\n        workflow.registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n        workflow.registry.useXDeprecatedProvider((msg) => logger.warn(msg));\n        workflow.registry.addSmartDefaultProvider('projectName', () => this.getProjectName());\n        const workingDir = (0, core_1.normalize)((0, path_1.relative)(this.context.root, process.cwd()));\n        workflow.registry.addSmartDefaultProvider('workingDirectory', () => workingDir === '' ? undefined : workingDir);\n        let shouldReportAnalytics = true;\n        workflow.engineHost.registerOptionsTransform(async (schematic, options) => {\n            // Report analytics\n            if (shouldReportAnalytics) {\n                shouldReportAnalytics = false;\n                const { collection: { name: collectionName }, name: schematicName, } = schematic;\n                const analytics = (0, analytics_1.isPackageNameSafeForAnalytics)(collectionName)\n                    ? await this.getAnalytics()\n                    : undefined;\n                analytics === null || analytics === void 0 ? void 0 : analytics.reportSchematicRunEvent({\n                    [analytics_parameters_1.EventCustomDimension.SchematicCollectionName]: collectionName,\n                    [analytics_parameters_1.EventCustomDimension.SchematicName]: schematicName,\n                    ...this.getAnalyticsParameters(options),\n                });\n            }\n            return options;\n        });\n        if (options.interactive !== false && (0, tty_1.isTTY)()) {\n            workflow.registry.usePromptProvider(async (definitions) => {\n                const questions = definitions\n                    .filter((definition) => !options.defaults || definition.default === undefined)\n                    .map((definition) => {\n                    var _a;\n                    const question = {\n                        name: definition.id,\n                        message: definition.message,\n                        default: definition.default,\n                    };\n                    const validator = definition.validator;\n                    if (validator) {\n                        question.validate = (input) => validator(input);\n                        // Filter allows transformation of the value prior to validation\n                        question.filter = async (input) => {\n                            for (const type of definition.propertyTypes) {\n                                let value;\n                                switch (type) {\n                                    case 'string':\n                                        value = String(input);\n                                        break;\n                                    case 'integer':\n                                    case 'number':\n                                        value = Number(input);\n                                        break;\n                                    default:\n                                        value = input;\n                                        break;\n                                }\n                                // Can be a string if validation fails\n                                const isValid = (await validator(value)) === true;\n                                if (isValid) {\n                                    return value;\n                                }\n                            }\n                            return input;\n                        };\n                    }\n                    switch (definition.type) {\n                        case 'confirmation':\n                            question.type = 'confirm';\n                            break;\n                        case 'list':\n                            question.type = definition.multiselect ? 'checkbox' : 'list';\n                            question.choices = (_a = definition.items) === null || _a === void 0 ? void 0 : _a.map((item) => {\n                                return typeof item == 'string'\n                                    ? item\n                                    : {\n                                        name: item.label,\n                                        value: item.value,\n                                    };\n                            });\n                            break;\n                        default:\n                            question.type = definition.type;\n                            break;\n                    }\n                    return question;\n                });\n                if (questions.length) {\n                    const { prompt } = await Promise.resolve().then(() => __importStar(require('inquirer')));\n                    return prompt(questions);\n                }\n                else {\n                    return {};\n                }\n            });\n        }\n        return workflow;\n    }\n    async getSchematicCollections() {\n        var _a;\n        // Resolve relative collections from the location of `angular.json`\n        const resolveRelativeCollection = (collectionName) => collectionName.charAt(0) === '.'\n            ? (0, path_1.resolve)(this.context.root, collectionName)\n            : collectionName;\n        const getSchematicCollections = (configSection) => {\n            if (!configSection) {\n                return undefined;\n            }\n            const { schematicCollections, defaultCollection } = configSection;\n            if (Array.isArray(schematicCollections)) {\n                return new Set(schematicCollections.map((c) => resolveRelativeCollection(c)));\n            }\n            else if (typeof defaultCollection === 'string') {\n                return new Set([resolveRelativeCollection(defaultCollection)]);\n            }\n            return undefined;\n        };\n        const { workspace, globalConfiguration } = this.context;\n        if (workspace) {\n            const project = (0, config_1.getProjectByCwd)(workspace);\n            if (project) {\n                const value = getSchematicCollections(workspace.getProjectCli(project));\n                if (value) {\n                    return value;\n                }\n            }\n        }\n        const value = (_a = getSchematicCollections(workspace === null || workspace === void 0 ? void 0 : workspace.getCli())) !== null && _a !== void 0 ? _a : getSchematicCollections(globalConfiguration.getCli());\n        if (value) {\n            return value;\n        }\n        return new Set([exports.DEFAULT_SCHEMATICS_COLLECTION]);\n    }\n    parseSchematicInfo(schematic) {\n        if (schematic === null || schematic === void 0 ? void 0 : schematic.includes(':')) {\n            const [collectionName, schematicName] = schematic.split(':', 2);\n            return [collectionName, schematicName];\n        }\n        return [undefined, schematic];\n    }\n    async runSchematic(options) {\n        const { logger } = this.context;\n        const { schematicOptions, executionOptions, collectionName, schematicName } = options;\n        const workflow = await this.getOrCreateWorkflowForExecution(collectionName, executionOptions);\n        if (!schematicName) {\n            throw new Error('schematicName cannot be undefined.');\n        }\n        const { unsubscribe, files } = (0, schematic_workflow_1.subscribeToWorkflow)(workflow, logger);\n        try {\n            await workflow\n                .execute({\n                collection: collectionName,\n                schematic: schematicName,\n                options: schematicOptions,\n                logger,\n                allowPrivate: this.allowPrivateSchematics,\n            })\n                .toPromise();\n            if (!files.size) {\n                logger.info('Nothing to be done.');\n            }\n            if (executionOptions.dryRun) {\n                logger.warn(`\\nNOTE: The \"--dry-run\" option means no changes were made.`);\n            }\n        }\n        catch (err) {\n            // In case the workflow was not successful, show an appropriate error message.\n            if (err instanceof schematics_1.UnsuccessfulWorkflowExecution) {\n                // \"See above\" because we already printed the error.\n                logger.fatal('The Schematic workflow failed. See above.');\n            }\n            else {\n                (0, error_1.assertIsError)(err);\n                logger.fatal(err.message);\n            }\n            return 1;\n        }\n        finally {\n            unsubscribe();\n        }\n        return 0;\n    }\n    getProjectName() {\n        const { workspace, logger } = this.context;\n        if (!workspace) {\n            return undefined;\n        }\n        const projectName = (0, config_1.getProjectByCwd)(workspace);\n        if (projectName) {\n            return projectName;\n        }\n        const defaultProjectName = workspace.extensions['defaultProject'];\n        if (typeof defaultProjectName === 'string' && defaultProjectName) {\n            if (!this.defaultProjectDeprecationWarningShown) {\n                logger.warn(core_1.tags.oneLine `\n             DEPRECATED: The 'defaultProject' workspace option has been deprecated.\n             The project to use will be determined from the current working directory.\n           `);\n                this.defaultProjectDeprecationWarningShown = true;\n            }\n            return defaultProjectName;\n        }\n        return undefined;\n    }\n    getResolvePaths(collectionName) {\n        const { workspace, root } = this.context;\n        return workspace\n            ? // Workspace\n                collectionName === exports.DEFAULT_SCHEMATICS_COLLECTION\n                    ? // Favor __dirname for @schematics/angular to use the build-in version\n                        [__dirname, process.cwd(), root]\n                    : [process.cwd(), root, __dirname]\n            : // Global\n                [__dirname, process.cwd()];\n    }\n}\n__decorate([\n    memoize_1.memoize\n], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForBuilder\", null);\n__decorate([\n    memoize_1.memoize\n], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForExecution\", null);\n__decorate([\n    memoize_1.memoize\n], SchematicsCommandModule.prototype, \"getSchematicCollections\", null);\nexports.SchematicsCommandModule = SchematicsCommandModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}