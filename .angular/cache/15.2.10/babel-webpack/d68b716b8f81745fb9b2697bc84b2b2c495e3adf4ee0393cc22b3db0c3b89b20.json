{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCacheConfig = exports.updateCacheConfig = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst path_1 = require(\"path\");\nconst workspace_schema_1 = require(\"../../../lib/config/workspace-schema\");\nfunction updateCacheConfig(workspace, key, value) {\n  var _a, _b;\n  var _c;\n  const cli = (_a = (_c = workspace.extensions)['cli']) !== null && _a !== void 0 ? _a : _c['cli'] = {};\n  const cache = (_b = cli['cache']) !== null && _b !== void 0 ? _b : cli['cache'] = {};\n  cache[key] = value;\n  return workspace.save();\n}\nexports.updateCacheConfig = updateCacheConfig;\nfunction getCacheConfig(workspace) {\n  if (!workspace) {\n    throw new Error(`Cannot retrieve cache configuration as workspace is not defined.`);\n  }\n  const defaultSettings = {\n    path: (0, path_1.resolve)(workspace.basePath, '.angular/cache'),\n    environment: workspace_schema_1.Environment.Local,\n    enabled: true\n  };\n  const cliSetting = workspace.extensions['cli'];\n  if (!cliSetting || !(0, core_1.isJsonObject)(cliSetting)) {\n    return defaultSettings;\n  }\n  const cacheSettings = cliSetting['cache'];\n  if (!(0, core_1.isJsonObject)(cacheSettings)) {\n    return defaultSettings;\n  }\n  const {\n    path = defaultSettings.path,\n    environment = defaultSettings.environment,\n    enabled = defaultSettings.enabled\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } = cacheSettings;\n  return {\n    path: (0, path_1.resolve)(workspace.basePath, path),\n    environment,\n    enabled\n  };\n}\nexports.getCacheConfig = getCacheConfig;","map":{"version":3,"names":["Object","defineProperty","exports","value","getCacheConfig","updateCacheConfig","core_1","require","path_1","workspace_schema_1","workspace","key","_a","_b","_c","cli","extensions","cache","save","Error","defaultSettings","path","resolve","basePath","environment","Environment","Local","enabled","cliSetting","isJsonObject","cacheSettings"],"sources":["I:/Angular/angular-blog/node_modules/@angular/cli/src/commands/cache/utilities.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCacheConfig = exports.updateCacheConfig = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst path_1 = require(\"path\");\nconst workspace_schema_1 = require(\"../../../lib/config/workspace-schema\");\nfunction updateCacheConfig(workspace, key, value) {\n    var _a, _b;\n    var _c;\n    const cli = ((_a = (_c = workspace.extensions)['cli']) !== null && _a !== void 0 ? _a : (_c['cli'] = {}));\n    const cache = ((_b = cli['cache']) !== null && _b !== void 0 ? _b : (cli['cache'] = {}));\n    cache[key] = value;\n    return workspace.save();\n}\nexports.updateCacheConfig = updateCacheConfig;\nfunction getCacheConfig(workspace) {\n    if (!workspace) {\n        throw new Error(`Cannot retrieve cache configuration as workspace is not defined.`);\n    }\n    const defaultSettings = {\n        path: (0, path_1.resolve)(workspace.basePath, '.angular/cache'),\n        environment: workspace_schema_1.Environment.Local,\n        enabled: true,\n    };\n    const cliSetting = workspace.extensions['cli'];\n    if (!cliSetting || !(0, core_1.isJsonObject)(cliSetting)) {\n        return defaultSettings;\n    }\n    const cacheSettings = cliSetting['cache'];\n    if (!(0, core_1.isJsonObject)(cacheSettings)) {\n        return defaultSettings;\n    }\n    const { path = defaultSettings.path, environment = defaultSettings.environment, enabled = defaultSettings.enabled,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     } = cacheSettings;\n    return {\n        path: (0, path_1.resolve)(workspace.basePath, path),\n        environment,\n        enabled,\n    };\n}\nexports.getCacheConfig = getCacheConfig;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,iBAAiB,GAAG,KAAK,CAAC;AAC3D,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9C,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sCAAsC,CAAC;AAC1E,SAASF,iBAAiB,CAACK,SAAS,EAAEC,GAAG,EAAER,KAAK,EAAE;EAC9C,IAAIS,EAAE,EAAEC,EAAE;EACV,IAAIC,EAAE;EACN,MAAMC,GAAG,GAAI,CAACH,EAAE,GAAG,CAACE,EAAE,GAAGJ,SAAS,CAACM,UAAU,EAAE,KAAK,CAAC,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAG;EACzG,MAAMG,KAAK,GAAI,CAACJ,EAAE,GAAGE,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIE,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAG;EACxFE,KAAK,CAACN,GAAG,CAAC,GAAGR,KAAK;EAClB,OAAOO,SAAS,CAACQ,IAAI,EAAE;AAC3B;AACAhB,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7C,SAASD,cAAc,CAACM,SAAS,EAAE;EAC/B,IAAI,CAACA,SAAS,EAAE;IACZ,MAAM,IAAIS,KAAK,CAAE,kEAAiE,CAAC;EACvF;EACA,MAAMC,eAAe,GAAG;IACpBC,IAAI,EAAE,CAAC,CAAC,EAAEb,MAAM,CAACc,OAAO,EAAEZ,SAAS,CAACa,QAAQ,EAAE,gBAAgB,CAAC;IAC/DC,WAAW,EAAEf,kBAAkB,CAACgB,WAAW,CAACC,KAAK;IACjDC,OAAO,EAAE;EACb,CAAC;EACD,MAAMC,UAAU,GAAGlB,SAAS,CAACM,UAAU,CAAC,KAAK,CAAC;EAC9C,IAAI,CAACY,UAAU,IAAI,CAAC,CAAC,CAAC,EAAEtB,MAAM,CAACuB,YAAY,EAAED,UAAU,CAAC,EAAE;IACtD,OAAOR,eAAe;EAC1B;EACA,MAAMU,aAAa,GAAGF,UAAU,CAAC,OAAO,CAAC;EACzC,IAAI,CAAC,CAAC,CAAC,EAAEtB,MAAM,CAACuB,YAAY,EAAEC,aAAa,CAAC,EAAE;IAC1C,OAAOV,eAAe;EAC1B;EACA,MAAM;IAAEC,IAAI,GAAGD,eAAe,CAACC,IAAI;IAAEG,WAAW,GAAGJ,eAAe,CAACI,WAAW;IAAEG,OAAO,GAAGP,eAAe,CAACO;IAC1G;EACC,CAAC,GAAGG,aAAa;EAClB,OAAO;IACHT,IAAI,EAAE,CAAC,CAAC,EAAEb,MAAM,CAACc,OAAO,EAAEZ,SAAS,CAACa,QAAQ,EAAEF,IAAI,CAAC;IACnDG,WAAW;IACXG;EACJ,CAAC;AACL;AACAzB,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}