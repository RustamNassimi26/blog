{"ast":null,"code":"import { environment } from '../../../../environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  get token() {\n    const expDate = new Date(localStorage.getItem('fb-token-exp'));\n    if (new Date() > expDate) {\n      this.logout();\n      return null;\n    }\n    return localStorage.getItem('fb-token');\n  }\n  login(user) {\n    user.returnSecureToken = true;\n    return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, user).pipe(tap(setthis.setToken));\n  }\n  logout() {\n    this.setToken(null);\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  setToken(response) {\n    if (response) {\n      const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000);\n      localStorage.setItem('fb-token', response.idToken);\n      localStorage.setItem('fb-token-exp', expDate.toString());\n    } else {\n      localStorage.clear();\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAIA,SAAQA,WAAW,QAAO,sCAAsC;AAChE,SAAQC,GAAG,QAAO,gBAAgB;;;AAGlC,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvC,IAAIC,KAAK;IACP,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC9D,IAAI,IAAIF,IAAI,EAAE,GAAGD,OAAO,EAAE;MACxB,IAAI,CAACI,MAAM,EAAE;MACb,OAAO,IAAI;;IAEb,OAAOF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAE,KAAK,CAACC,IAAU;IACdA,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,6EAA6Ed,WAAW,CAACe,MAAM,EAAE,EAAEH,IAAI,CAAC,CAC3HI,IAAI,CACHf,GAAG,CAACgB,OAAO,CAACC,QAAQ,CAAC,CACtB;EACL;EAEAR,MAAM;IACJ,IAAI,CAACQ,QAAQ,CAAC,IAAI,CAAC;EACrB;EAEAC,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACd,KAAK;EACrB;EAEQa,QAAQ,CAACE,QAA+B;IAC9C,IAAIA,QAAQ,EAAE;MACZ,MAAMd,OAAO,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACc,OAAO,EAAE,GAAG,CAACD,QAAQ,CAACE,SAAS,GAAG,IAAI,CAAC;MAC3Ed,YAAY,CAACe,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAACI,OAAO,CAAC;MAClDhB,YAAY,CAACe,OAAO,CAAC,cAAc,EAAEjB,OAAO,CAACmB,QAAQ,EAAE,CAAC;KACzD,MAAM;MACLjB,YAAY,CAACkB,KAAK,EAAE;;EAExB;EAAC;qBApCUxB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAyB,SAAXzB,WAAW;EAAA","names":["environment","tap","AuthService","constructor","http","token","expDate","Date","localStorage","getItem","logout","login","user","returnSecureToken","post","apiKey","pipe","setthis","setToken","isAuthenticated","response","getTime","expiresIn","setItem","idToken","toString","clear","factory"],"sourceRoot":"","sources":["I:\\Angular\\angular-blog\\src\\app\\admin\\shared\\services\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {FbAuthResponse, User} from '../../../shared/interfaces';\r\nimport {Observable} from 'rxjs';\r\nimport {environment} from '../../../../environments/environment';\r\nimport {tap} from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get token(): string {\r\n    const expDate = new Date(localStorage.getItem('fb-token-exp'))\r\n    if (new Date() > expDate) {\r\n      this.logout()\r\n      return null\r\n    }\r\n    return localStorage.getItem('fb-token')\r\n  }\r\n\r\n  login(user: User): Observable<any> {\r\n    user.returnSecureToken = true\r\n    return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, user)\r\n      .pipe(\r\n        tap(setthis.setToken)\r\n      )\r\n  }\r\n\r\n  logout() {\r\n    this.setToken(null)\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.token\r\n  }\r\n\r\n  private setToken(response: FbAuthResponse | null) {\r\n    if (response) {\r\n      const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000)\r\n      localStorage.setItem('fb-token', response.idToken)\r\n      localStorage.setItem('fb-token-exp', expDate.toString())\r\n    } else {\r\n      localStorage.clear()\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}