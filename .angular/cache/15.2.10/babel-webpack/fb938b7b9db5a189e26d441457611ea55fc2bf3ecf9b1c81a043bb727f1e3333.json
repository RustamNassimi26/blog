{"ast":null,"code":"'use strict';\n\nconst gitHosts = require('./git-host-info.js');\nconst GitHost = module.exports = require('./git-host.js');\nconst LRU = require('lru-cache');\nconst parseUrl = require('./parse-url.js');\nconst cache = new LRU({\n  max: 1000\n});\nconst protocols = {\n  'git+ssh:': {\n    name: 'sshurl'\n  },\n  'ssh:': {\n    name: 'sshurl'\n  },\n  'git+https:': {\n    name: 'https',\n    auth: true\n  },\n  'git:': {\n    auth: true\n  },\n  'http:': {\n    auth: true\n  },\n  'https:': {\n    auth: true\n  },\n  'git+http:': {\n    auth: true\n  },\n  ...Object.keys(gitHosts.byShortcut).reduce((acc, key) => {\n    acc[key] = {\n      name: gitHosts.byShortcut[key]\n    };\n    return acc;\n  }, {})\n};\nmodule.exports.fromUrl = function (giturl, opts) {\n  if (typeof giturl !== 'string') {\n    return;\n  }\n  const key = giturl + JSON.stringify(opts || {});\n  if (!cache.has(key)) {\n    cache.set(key, fromUrl(giturl, opts));\n  }\n  return cache.get(key);\n};\nmodule.exports.parseUrl = parseUrl;\nfunction fromUrl(giturl, opts) {\n  if (!giturl) {\n    return;\n  }\n  const correctedUrl = isGitHubShorthand(giturl) ? `github:${giturl}` : giturl;\n  const parsed = parseUrl(correctedUrl, protocols);\n  if (!parsed) {\n    return;\n  }\n  const gitHostShortcut = gitHosts.byShortcut[parsed.protocol];\n  const gitHostDomain = gitHosts.byDomain[parsed.hostname.startsWith('www.') ? parsed.hostname.slice(4) : parsed.hostname];\n  const gitHostName = gitHostShortcut || gitHostDomain;\n  if (!gitHostName) {\n    return;\n  }\n  const gitHostInfo = gitHosts[gitHostShortcut || gitHostDomain];\n  let auth = null;\n  if (protocols[parsed.protocol] && protocols[parsed.protocol].auth && (parsed.username || parsed.password)) {\n    auth = `${parsed.username}${parsed.password ? ':' + parsed.password : ''}`;\n  }\n  let committish = null;\n  let user = null;\n  let project = null;\n  let defaultRepresentation = null;\n  try {\n    if (gitHostShortcut) {\n      let pathname = parsed.pathname.startsWith('/') ? parsed.pathname.slice(1) : parsed.pathname;\n      const firstAt = pathname.indexOf('@');\n      // we ignore auth for shortcuts, so just trim it out\n      if (firstAt > -1) {\n        pathname = pathname.slice(firstAt + 1);\n      }\n      const lastSlash = pathname.lastIndexOf('/');\n      if (lastSlash > -1) {\n        user = decodeURIComponent(pathname.slice(0, lastSlash));\n        // we want nulls only, never empty strings\n        if (!user) {\n          user = null;\n        }\n        project = decodeURIComponent(pathname.slice(lastSlash + 1));\n      } else {\n        project = decodeURIComponent(pathname);\n      }\n      if (project.endsWith('.git')) {\n        project = project.slice(0, -4);\n      }\n      if (parsed.hash) {\n        committish = decodeURIComponent(parsed.hash.slice(1));\n      }\n      defaultRepresentation = 'shortcut';\n    } else {\n      if (!gitHostInfo.protocols.includes(parsed.protocol)) {\n        return;\n      }\n      const segments = gitHostInfo.extract(parsed);\n      if (!segments) {\n        return;\n      }\n      user = segments.user && decodeURIComponent(segments.user);\n      project = decodeURIComponent(segments.project);\n      committish = decodeURIComponent(segments.committish);\n      defaultRepresentation = protocols[parsed.protocol] && protocols[parsed.protocol].name || parsed.protocol.slice(0, -1);\n    }\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err instanceof URIError) {\n      return;\n    } else {\n      throw err;\n    }\n  }\n  return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts);\n}\n\n// look for github shorthand inputs, such as npm/cli\nconst isGitHubShorthand = arg => {\n  // it cannot contain whitespace before the first #\n  // it cannot start with a / because that's probably an absolute file path\n  // but it must include a slash since repos are username/repository\n  // it cannot start with a . because that's probably a relative file path\n  // it cannot start with an @ because that's a scoped package if it passes the other tests\n  // it cannot contain a : before a # because that tells us that there's a protocol\n  // a second / may not exist before a #\n  const firstHash = arg.indexOf('#');\n  const firstSlash = arg.indexOf('/');\n  const secondSlash = arg.indexOf('/', firstSlash + 1);\n  const firstColon = arg.indexOf(':');\n  const firstSpace = /\\s/.exec(arg);\n  const firstAt = arg.indexOf('@');\n  const spaceOnlyAfterHash = !firstSpace || firstHash > -1 && firstSpace.index > firstHash;\n  const atOnlyAfterHash = firstAt === -1 || firstHash > -1 && firstAt > firstHash;\n  const colonOnlyAfterHash = firstColon === -1 || firstHash > -1 && firstColon > firstHash;\n  const secondSlashOnlyAfterHash = secondSlash === -1 || firstHash > -1 && secondSlash > firstHash;\n  const hasSlash = firstSlash > 0;\n  // if a # is found, what we really want to know is that the character\n  // immediately before # is not a /\n  const doesNotEndWithSlash = firstHash > -1 ? arg[firstHash - 1] !== '/' : !arg.endsWith('/');\n  const doesNotStartWithDot = !arg.startsWith('.');\n  return spaceOnlyAfterHash && hasSlash && doesNotEndWithSlash && doesNotStartWithDot && atOnlyAfterHash && colonOnlyAfterHash && secondSlashOnlyAfterHash;\n};","map":{"version":3,"names":["gitHosts","require","GitHost","module","exports","LRU","parseUrl","cache","max","protocols","name","auth","Object","keys","byShortcut","reduce","acc","key","fromUrl","giturl","opts","JSON","stringify","has","set","get","correctedUrl","isGitHubShorthand","parsed","gitHostShortcut","protocol","gitHostDomain","byDomain","hostname","startsWith","slice","gitHostName","gitHostInfo","username","password","committish","user","project","defaultRepresentation","pathname","firstAt","indexOf","lastSlash","lastIndexOf","decodeURIComponent","endsWith","hash","includes","segments","extract","err","URIError","arg","firstHash","firstSlash","secondSlash","firstColon","firstSpace","exec","spaceOnlyAfterHash","index","atOnlyAfterHash","colonOnlyAfterHash","secondSlashOnlyAfterHash","hasSlash","doesNotEndWithSlash","doesNotStartWithDot"],"sources":["I:/Angular/angular-blog/node_modules/hosted-git-info/lib/index.js"],"sourcesContent":["'use strict'\nconst gitHosts = require('./git-host-info.js')\nconst GitHost = module.exports = require('./git-host.js')\nconst LRU = require('lru-cache')\nconst parseUrl = require('./parse-url.js')\n\nconst cache = new LRU({ max: 1000 })\n\nconst protocols = {\n  'git+ssh:': { name: 'sshurl' },\n  'ssh:': { name: 'sshurl' },\n  'git+https:': { name: 'https', auth: true },\n  'git:': { auth: true },\n  'http:': { auth: true },\n  'https:': { auth: true },\n  'git+http:': { auth: true },\n  ...Object.keys(gitHosts.byShortcut).reduce((acc, key) => {\n    acc[key] = { name: gitHosts.byShortcut[key] }\n    return acc\n  }, {}),\n}\n\nmodule.exports.fromUrl = function (giturl, opts) {\n  if (typeof giturl !== 'string') {\n    return\n  }\n\n  const key = giturl + JSON.stringify(opts || {})\n\n  if (!cache.has(key)) {\n    cache.set(key, fromUrl(giturl, opts))\n  }\n\n  return cache.get(key)\n}\n\nmodule.exports.parseUrl = parseUrl\n\nfunction fromUrl (giturl, opts) {\n  if (!giturl) {\n    return\n  }\n\n  const correctedUrl = isGitHubShorthand(giturl) ? `github:${giturl}` : giturl\n  const parsed = parseUrl(correctedUrl, protocols)\n  if (!parsed) {\n    return\n  }\n\n  const gitHostShortcut = gitHosts.byShortcut[parsed.protocol]\n  const gitHostDomain = gitHosts.byDomain[parsed.hostname.startsWith('www.')\n    ? parsed.hostname.slice(4)\n    : parsed.hostname]\n  const gitHostName = gitHostShortcut || gitHostDomain\n  if (!gitHostName) {\n    return\n  }\n\n  const gitHostInfo = gitHosts[gitHostShortcut || gitHostDomain]\n  let auth = null\n  if (protocols[parsed.protocol] &&\n      protocols[parsed.protocol].auth &&\n      (parsed.username || parsed.password)\n  ) {\n    auth = `${parsed.username}${parsed.password ? ':' + parsed.password : ''}`\n  }\n\n  let committish = null\n  let user = null\n  let project = null\n  let defaultRepresentation = null\n\n  try {\n    if (gitHostShortcut) {\n      let pathname = parsed.pathname.startsWith('/') ? parsed.pathname.slice(1) : parsed.pathname\n      const firstAt = pathname.indexOf('@')\n      // we ignore auth for shortcuts, so just trim it out\n      if (firstAt > -1) {\n        pathname = pathname.slice(firstAt + 1)\n      }\n\n      const lastSlash = pathname.lastIndexOf('/')\n      if (lastSlash > -1) {\n        user = decodeURIComponent(pathname.slice(0, lastSlash))\n        // we want nulls only, never empty strings\n        if (!user) {\n          user = null\n        }\n        project = decodeURIComponent(pathname.slice(lastSlash + 1))\n      } else {\n        project = decodeURIComponent(pathname)\n      }\n\n      if (project.endsWith('.git')) {\n        project = project.slice(0, -4)\n      }\n\n      if (parsed.hash) {\n        committish = decodeURIComponent(parsed.hash.slice(1))\n      }\n\n      defaultRepresentation = 'shortcut'\n    } else {\n      if (!gitHostInfo.protocols.includes(parsed.protocol)) {\n        return\n      }\n\n      const segments = gitHostInfo.extract(parsed)\n      if (!segments) {\n        return\n      }\n\n      user = segments.user && decodeURIComponent(segments.user)\n      project = decodeURIComponent(segments.project)\n      committish = decodeURIComponent(segments.committish)\n      defaultRepresentation = (protocols[parsed.protocol] && protocols[parsed.protocol].name)\n        || parsed.protocol.slice(0, -1)\n    }\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err instanceof URIError) {\n      return\n    } else {\n      throw err\n    }\n  }\n\n  return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts)\n}\n\n// look for github shorthand inputs, such as npm/cli\nconst isGitHubShorthand = (arg) => {\n  // it cannot contain whitespace before the first #\n  // it cannot start with a / because that's probably an absolute file path\n  // but it must include a slash since repos are username/repository\n  // it cannot start with a . because that's probably a relative file path\n  // it cannot start with an @ because that's a scoped package if it passes the other tests\n  // it cannot contain a : before a # because that tells us that there's a protocol\n  // a second / may not exist before a #\n  const firstHash = arg.indexOf('#')\n  const firstSlash = arg.indexOf('/')\n  const secondSlash = arg.indexOf('/', firstSlash + 1)\n  const firstColon = arg.indexOf(':')\n  const firstSpace = /\\s/.exec(arg)\n  const firstAt = arg.indexOf('@')\n\n  const spaceOnlyAfterHash = !firstSpace || (firstHash > -1 && firstSpace.index > firstHash)\n  const atOnlyAfterHash = firstAt === -1 || (firstHash > -1 && firstAt > firstHash)\n  const colonOnlyAfterHash = firstColon === -1 || (firstHash > -1 && firstColon > firstHash)\n  const secondSlashOnlyAfterHash = secondSlash === -1 || (firstHash > -1 && secondSlash > firstHash)\n  const hasSlash = firstSlash > 0\n  // if a # is found, what we really want to know is that the character\n  // immediately before # is not a /\n  const doesNotEndWithSlash = firstHash > -1 ? arg[firstHash - 1] !== '/' : !arg.endsWith('/')\n  const doesNotStartWithDot = !arg.startsWith('.')\n\n  return spaceOnlyAfterHash && hasSlash && doesNotEndWithSlash &&\n    doesNotStartWithDot && atOnlyAfterHash && colonOnlyAfterHash &&\n    secondSlashOnlyAfterHash\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}