{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readJsonFile = void 0;\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst fs_1 = require(\"fs\");\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nfunction readJsonFile(path) {\n  if (!(0, fs_1.existsSync)(path)) {\n    throw new schematics_1.FileDoesNotExistException(path);\n  }\n  const errors = [];\n  const content = (0, jsonc_parser_1.parse)((0, fs_1.readFileSync)(path, 'utf-8'), errors, {\n    allowTrailingComma: true\n  });\n  if (errors.length) {\n    const {\n      error,\n      offset\n    } = errors[0];\n    throw new Error(`Failed to parse \"${path}\" as JSON AST Object. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at location: ${offset}.`);\n  }\n  return content;\n}\nexports.readJsonFile = readJsonFile;","map":{"version":3,"names":["Object","defineProperty","exports","value","readJsonFile","schematics_1","require","fs_1","jsonc_parser_1","path","existsSync","FileDoesNotExistException","errors","content","parse","readFileSync","allowTrailingComma","length","error","offset","Error","printParseErrorCode"],"sources":["I:/Angular/angular-blog/node_modules/@angular-devkit/schematics/tools/file-system-utility.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readJsonFile = void 0;\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst fs_1 = require(\"fs\");\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nfunction readJsonFile(path) {\n    if (!(0, fs_1.existsSync)(path)) {\n        throw new schematics_1.FileDoesNotExistException(path);\n    }\n    const errors = [];\n    const content = (0, jsonc_parser_1.parse)((0, fs_1.readFileSync)(path, 'utf-8'), errors, { allowTrailingComma: true });\n    if (errors.length) {\n        const { error, offset } = errors[0];\n        throw new Error(`Failed to parse \"${path}\" as JSON AST Object. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at location: ${offset}.`);\n    }\n    return content;\n}\nexports.readJsonFile = readJsonFile;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,YAAY,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAC1D,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAI,CAAC;AAC1B,MAAME,cAAc,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC9C,SAASF,YAAY,CAACK,IAAI,EAAE;EACxB,IAAI,CAAC,CAAC,CAAC,EAAEF,IAAI,CAACG,UAAU,EAAED,IAAI,CAAC,EAAE;IAC7B,MAAM,IAAIJ,YAAY,CAACM,yBAAyB,CAACF,IAAI,CAAC;EAC1D;EACA,MAAMG,MAAM,GAAG,EAAE;EACjB,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEL,cAAc,CAACM,KAAK,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACQ,YAAY,EAAEN,IAAI,EAAE,OAAO,CAAC,EAAEG,MAAM,EAAE;IAAEI,kBAAkB,EAAE;EAAK,CAAC,CAAC;EACtH,IAAIJ,MAAM,CAACK,MAAM,EAAE;IACf,MAAM;MAAEC,KAAK;MAAEC;IAAO,CAAC,GAAGP,MAAM,CAAC,CAAC,CAAC;IACnC,MAAM,IAAIQ,KAAK,CAAE,oBAAmBX,IAAK,yBAAwB,CAAC,CAAC,EAAED,cAAc,CAACa,mBAAmB,EAAEH,KAAK,CAAE,iBAAgBC,MAAO,GAAE,CAAC;EAC9I;EACA,OAAON,OAAO;AAClB;AACAX,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}