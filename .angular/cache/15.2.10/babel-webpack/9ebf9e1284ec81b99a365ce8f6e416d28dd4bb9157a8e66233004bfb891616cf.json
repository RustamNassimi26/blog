{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasMagic = void 0;\nconst minimatch_1 = require(\"minimatch\");\n/**\n * Return true if the patterns provided contain any magic glob characters,\n * given the options provided.\n *\n * Brace expansion is not considered \"magic\" unless the `magicalBraces` option\n * is set, as brace expansion just turns one string into an array of strings.\n * So a pattern like `'x{a,b}y'` would return `false`, because `'xay'` and\n * `'xby'` both do not contain any magic glob characters, and it's treated the\n * same as if you had called it on `['xay', 'xby']`. When `magicalBraces:true`\n * is in the options, brace expansion _is_ treated as a pattern having magic.\n */\nconst hasMagic = (pattern, options = {}) => {\n  if (!Array.isArray(pattern)) {\n    pattern = [pattern];\n  }\n  for (const p of pattern) {\n    if (new minimatch_1.Minimatch(p, options).hasMagic()) return true;\n  }\n  return false;\n};\nexports.hasMagic = hasMagic;","map":{"version":3,"names":["Object","defineProperty","exports","value","hasMagic","minimatch_1","require","pattern","options","Array","isArray","p","Minimatch"],"sources":["I:/Angular/angular-blog/node_modules/read-package-json/node_modules/glob/dist/commonjs/has-magic.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasMagic = void 0;\nconst minimatch_1 = require(\"minimatch\");\n/**\n * Return true if the patterns provided contain any magic glob characters,\n * given the options provided.\n *\n * Brace expansion is not considered \"magic\" unless the `magicalBraces` option\n * is set, as brace expansion just turns one string into an array of strings.\n * So a pattern like `'x{a,b}y'` would return `false`, because `'xay'` and\n * `'xby'` both do not contain any magic glob characters, and it's treated the\n * same as if you had called it on `['xay', 'xby']`. When `magicalBraces:true`\n * is in the options, brace expansion _is_ treated as a pattern having magic.\n */\nconst hasMagic = (pattern, options = {}) => {\n    if (!Array.isArray(pattern)) {\n        pattern = [pattern];\n    }\n    for (const p of pattern) {\n        if (new minimatch_1.Minimatch(p, options).hasMagic())\n            return true;\n    }\n    return false;\n};\nexports.hasMagic = hasMagic;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,WAAW,GAAGC,OAAO,CAAC,WAAW,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,QAAQ,GAAG,CAACG,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACxC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;IACzBA,OAAO,GAAG,CAACA,OAAO,CAAC;EACvB;EACA,KAAK,MAAMI,CAAC,IAAIJ,OAAO,EAAE;IACrB,IAAI,IAAIF,WAAW,CAACO,SAAS,CAACD,CAAC,EAAEH,OAAO,CAAC,CAACJ,QAAQ,EAAE,EAChD,OAAO,IAAI;EACnB;EACA,OAAO,KAAK;AAChB,CAAC;AACDF,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}